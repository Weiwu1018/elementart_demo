{"creation_time": "2024-08-19T02:25:12+00:00", "days_back": 7, "models": {"model.elementary_tutorial.returned_orders": {"name": "returned_orders", "unique_id": "model.elementary_tutorial.returned_orders", "owners": [], "tags": ["finance"], "package_name": "elementary_tutorial", "description": "This table contains all of the returned orders", "full_path": "models/returned_orders.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "returned_orders", "patch_path": "elementary_tutorial://models/schema.yml", "model_name": "returned_orders", "normalized_full_path": "elementary_tutorial/models/returned_orders.sql", "fqn": "demo_0819.public.returned_orders", "artifact_type": "model"}, "model.elementary_tutorial.test4_volume_anomaly": {"name": "test4_volume_anomaly", "unique_id": "model.elementary_tutorial.test4_volume_anomaly", "owners": [], "tags": ["PII"], "package_name": "elementary_tutorial", "description": "This table has basic information about a customer", "full_path": "models/test4_volume_anomaly.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_volume_anomaly", "patch_path": "elementary_tutorial://models/schema.yml", "model_name": "test4_volume_anomaly", "normalized_full_path": "elementary_tutorial/models/test4_volume_anomaly.sql", "fqn": "demo_0819.public.test4_volume_anomaly", "artifact_type": "model"}, "model.elementary_tutorial.customers": {"name": "customers", "unique_id": "model.elementary_tutorial.customers", "owners": [], "tags": ["PII"], "package_name": "elementary_tutorial", "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders", "full_path": "models/customers.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "customers", "patch_path": "elementary_tutorial://models/schema.yml", "model_name": "customers", "normalized_full_path": "elementary_tutorial/models/customers.sql", "fqn": "demo_0819.public.customers", "artifact_type": "model"}, "model.elementary_tutorial.orders": {"name": "orders", "unique_id": "model.elementary_tutorial.orders", "owners": [], "tags": ["finance"], "package_name": "elementary_tutorial", "description": "This table has basic information about orders, as well as some derived facts based on payments", "full_path": "models/orders.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "orders", "patch_path": "elementary_tutorial://models/schema.yml", "model_name": "orders", "normalized_full_path": "elementary_tutorial/models/orders.sql", "fqn": "demo_0819.public.orders", "artifact_type": "model"}, "model.elementary_tutorial.test4_column_anomaly": {"name": "test4_column_anomaly", "unique_id": "model.elementary_tutorial.test4_column_anomaly", "owners": [], "tags": ["PII"], "package_name": "elementary_tutorial", "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders", "full_path": "models/test4_column_anomaly.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "patch_path": "elementary_tutorial://models/schema.yml", "model_name": "test4_column_anomaly", "normalized_full_path": "elementary_tutorial/models/test4_column_anomaly.sql", "fqn": "demo_0819.public.test4_column_anomaly", "artifact_type": "model"}, "model.elementary_tutorial.stg_customers": {"name": "stg_customers", "unique_id": "model.elementary_tutorial.stg_customers", "owners": [], "tags": [], "package_name": "elementary_tutorial", "description": "", "full_path": "models/staging/stg_customers.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "stg_customers", "patch_path": null, "model_name": "stg_customers", "normalized_full_path": "elementary_tutorial/models/staging/stg_customers.sql", "fqn": "demo_0819.public.stg_customers", "artifact_type": "model"}, "model.elementary_tutorial.test_practice": {"name": "test_practice", "unique_id": "model.elementary_tutorial.test_practice", "owners": [], "tags": [], "package_name": "elementary_tutorial", "description": "", "full_path": "models/staging/test_practice.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "test_practice", "patch_path": null, "model_name": "test_practice", "normalized_full_path": "elementary_tutorial/models/staging/test_practice.sql", "fqn": "demo_0819.public.test_practice", "artifact_type": "model"}, "model.elementary_tutorial.stg_payments": {"name": "stg_payments", "unique_id": "model.elementary_tutorial.stg_payments", "owners": [], "tags": [], "package_name": "elementary_tutorial", "description": "", "full_path": "models/staging/stg_payments.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "stg_payments", "patch_path": null, "model_name": "stg_payments", "normalized_full_path": "elementary_tutorial/models/staging/stg_payments.sql", "fqn": "demo_0819.public.stg_payments", "artifact_type": "model"}, "model.elementary_tutorial.stg_orders": {"name": "stg_orders", "unique_id": "model.elementary_tutorial.stg_orders", "owners": [], "tags": [], "package_name": "elementary_tutorial", "description": "", "full_path": "models/staging/stg_orders.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "stg_orders", "patch_path": null, "model_name": "stg_orders", "normalized_full_path": "elementary_tutorial/models/staging/stg_orders.sql", "fqn": "demo_0819.public.stg_orders", "artifact_type": "model"}, "model.elementary_tutorial.stg_signups": {"name": "stg_signups", "unique_id": "model.elementary_tutorial.stg_signups", "owners": [], "tags": [], "package_name": "elementary_tutorial", "description": "", "full_path": "models/staging/stg_signups.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "stg_signups", "patch_path": null, "model_name": "stg_signups", "normalized_full_path": "elementary_tutorial/models/staging/stg_signups.sql", "fqn": "demo_0819.public.stg_signups", "artifact_type": "model"}, "model.elementary_tutorial.test_volume": {"name": "test_volume", "unique_id": "model.elementary_tutorial.test_volume", "owners": [], "tags": [], "package_name": "elementary_tutorial", "description": "", "full_path": "models/staging/test_volume.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "test_volume", "patch_path": null, "model_name": "test_volume", "normalized_full_path": "elementary_tutorial/models/staging/test_volume.sql", "fqn": "demo_0819.public.test_volume", "artifact_type": "model"}, "model.elementary_tutorial.test4schema": {"name": "test4schema", "unique_id": "model.elementary_tutorial.test4schema", "owners": [], "tags": ["PII"], "package_name": "elementary_tutorial", "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders", "full_path": "models/test4schema.sql", "meta": {}, "materialization": "view", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4schema", "patch_path": "elementary_tutorial://models/schema.yml", "model_name": "test4schema", "normalized_full_path": "elementary_tutorial/models/test4schema.sql", "fqn": "demo_0819.public.test4schema", "artifact_type": "model"}}, "groups": {"dbt": {"elementary_tutorial": {"models": {"__files__": [{"node_id": "model.elementary_tutorial.returned_orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4_volume_anomaly", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.customers", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4_column_anomaly", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4schema", "resource_type": "model"}], "staging": {"__files__": [{"node_id": "model.elementary_tutorial.stg_customers", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test_practice", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_payments", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_signups", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test_volume", "resource_type": "model"}]}}, "tests": {"__files__": [{"node_id": "test.elementary_tutorial.test4_dbt_test", "resource_type": "test"}]}}}, "tags": {"finance": [{"node_id": "model.elementary_tutorial.returned_orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.orders", "resource_type": "model"}], "PII": [{"node_id": "model.elementary_tutorial.test4_volume_anomaly", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.customers", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4_column_anomaly", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4schema", "resource_type": "model"}], "No tags": [{"node_id": "model.elementary_tutorial.stg_customers", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test_practice", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_payments", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_signups", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test_volume", "resource_type": "model"}, {"node_id": "test.elementary_tutorial.test4_dbt_test", "resource_type": "test"}]}, "owners": {"No owners": [{"node_id": "model.elementary_tutorial.returned_orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4_volume_anomaly", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.customers", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4_column_anomaly", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_customers", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test_practice", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_payments", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_orders", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.stg_signups", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test_volume", "resource_type": "model"}, {"node_id": "model.elementary_tutorial.test4schema", "resource_type": "model"}, {"node_id": "test.elementary_tutorial.test4_dbt_test", "resource_type": "test"}]}}, "invocation": {"invocation_id": null, "detected_at": null, "command": null, "selected": null, "full_refresh": null, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}, "test_results": {"model.elementary_tutorial.orders": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371", "elementary_unique_id": "test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371", "database_name": "demo_0819", "schema_name": "public", "table_name": "orders", "column_name": null, "test_name": "dimension_anomalies", "test_display_name": "Dimension Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.orders", "table_unique_id": "demo_0819.public.orders", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022328857867\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"dimensions": ["status"], "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "Monitors the frequency of values in the configured dimensions over time.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022328857867\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "dimension_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Generic", "metrics": {"headers": [{"id": "anomalous_value_timestamp", "display_name": "timestamp", "type": "date"}, {"id": "anomalous_value_generic", "display_name": "generic", "type": "int"}, {"id": "anomalous_value_average_generic", "display_name": "average generic", "type": "int"}], "test_rows_sample": []}, "result_description": null}}], "model.elementary_tutorial.test4schema": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "elementary_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "database_name": "DEMO_0819", "schema_name": "PUBLIC", "table_name": "TEST4SCHEMA", "column_name": "id", "test_name": "schema_changes", "test_display_name": "Schema Changes", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "warn", "model_unique_id": "model.elementary_tutorial.test4schema", "table_unique_id": "demo_0819.public.test4schema", "test_type": "schema_change", "test_sub_type": "column_removed", "test_query": null, "test_params": {"model": "{{ get_where_subquery(ref('test4schema')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": "The column \"id\" was removed", "result_query": null}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "column removed", "metrics": null, "result_description": "The column \"id\" was removed"}}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "elementary_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "database_name": "DEMO_0819", "schema_name": "PUBLIC", "table_name": "TEST4SCHEMA", "column_name": "birth", "test_name": "schema_changes", "test_display_name": "Schema Changes", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "warn", "model_unique_id": "model.elementary_tutorial.test4schema", "table_unique_id": "demo_0819.public.test4schema", "test_type": "schema_change", "test_sub_type": "column_removed", "test_query": null, "test_params": {"model": "{{ get_where_subquery(ref('test4schema')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": "The column \"birth\" was removed", "result_query": null}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "column removed", "metrics": null, "result_description": "The column \"birth\" was removed"}}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "elementary_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "database_name": "DEMO_0819", "schema_name": "PUBLIC", "table_name": "TEST4SCHEMA", "column_name": "name", "test_name": "schema_changes", "test_display_name": "Schema Changes", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "warn", "model_unique_id": "model.elementary_tutorial.test4schema", "table_unique_id": "demo_0819.public.test4schema", "test_type": "schema_change", "test_sub_type": "column_removed", "test_query": null, "test_params": {"model": "{{ get_where_subquery(ref('test4schema')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": "The column \"name\" was removed", "result_query": null}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "column removed", "metrics": null, "result_description": "The column \"name\" was removed"}}], "model.elementary_tutorial.test4_column_anomaly": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "name", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:21:00+08:00", "latest_run_time_utc": "2024-08-19T02:21:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"column_anomalies": ["null_count"], "anomaly_sensitivity": 1, "column_name": "name", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_anomalies", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Generic", "metrics": [], "result_description": null}}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "name", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:28+08:00", "latest_run_time_utc": "2024-08-19T02:23:28+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "null_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('null_count' as varchar(4096))\n          and upper(column_name) = upper(cast('name' as varchar(4096)))", "test_params": {"column_anomalies": ["null_count"], "anomaly_sensitivity": 1, "column_name": "name", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}", "timestamp_column": "birth", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": "Not enough data to calculate anomaly score.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('null_count' as varchar(4096))\n          and upper(column_name) = upper(cast('name' as varchar(4096)))"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": "birth", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_anomalies", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Null Count", "metrics": [], "result_description": "Not enough data to calculate anomaly score."}}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "age", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:21:00+08:00", "latest_run_time_utc": "2024-08-19T02:21:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"column_anomalies": ["zero_count", "max"], "anomaly_sensitivity": 1, "column_name": "age", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_test", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Generic", "metrics": [], "result_description": null}}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "age", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:28+08:00", "latest_run_time_utc": "2024-08-19T02:23:28+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "zero_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('zero_count' as varchar(4096))\n          and upper(column_name) = upper(cast('age' as varchar(4096)))", "test_params": {"column_anomalies": ["zero_count", "max"], "anomaly_sensitivity": 1, "column_name": "age", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}", "timestamp_column": "birth", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": "Not enough data to calculate anomaly score.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('zero_count' as varchar(4096))\n          and upper(column_name) = upper(cast('age' as varchar(4096)))"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": "birth", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_test", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Zero Count", "metrics": [], "result_description": "Not enough data to calculate anomaly score."}}], "test.elementary_tutorial.test4_dbt_test": [{"metadata": {"test_unique_id": "test.elementary_tutorial.test4_dbt_test", "elementary_unique_id": "test.elementary_tutorial.test4_dbt_test.None.singular", "database_name": "demo_0819", "schema_name": "public", "table_name": "test_practice", "column_name": null, "test_name": "test4_dbt_test", "test_display_name": "Test4 Dbt Test", "original_path": "tests/test4_dbt_test.sql", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "fail", "model_unique_id": "model.elementary_tutorial.test_practice", "table_unique_id": "demo_0819.public.test_practice", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count"}, "configuration": {"test_name": "test4_dbt_test", "test_params": {}}, "test_tags": [], "normalized_full_path": "elementary_tutorial/tests/test4_dbt_test.sql"}, "test_results": {"display_name": "test4_dbt_test", "results_sample": [{"actual_count": 583, "expected_count": 300}], "error_message": "Got 1 result, configured to fail if != 0", "failed_rows_count": 1}}], "model.elementary_tutorial.customers": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic", "database_name": "demo_0819", "schema_name": "public", "table_name": "customers", "column_name": "number_of_orders", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.customers", "table_unique_id": "demo_0819.public.customers", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_e012735381_eleme__anomaly_scores__tmp_20240819022327905424\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"column_anomalies": ["zero_count"], "timestamp_column": "signup_date", "column_name": "number_of_orders", "model": "{{ get_where_subquery(ref('customers')) }}"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_e012735381_eleme__anomaly_scores__tmp_20240819022327905424\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": "signup_date", "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["column_anomalies", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Generic", "metrics": [], "result_description": null}}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "elementary_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "customers", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.customers", "table_unique_id": "demo_0819.public.customers", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"anomaly_sensitivity": 1, "model": "{{ get_where_subquery(ref('customers')) }}", "timestamp_column": "signup_date", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": "signup_date", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["elementary-tests", "volume_anomalies"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Row Count", "metrics": [{"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-06T00:00:00", "end_time": "2024-08-07T00:00:00", "id": "b0170f1946093808b6f1e6260977e13a", "metric_id": "bf5e28a94431dea275571fed6c5bfecd", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-06T00:00:00", "bucket_end": "2024-08-07T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 2, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-07T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-07T00:00:00", "end_time": "2024-08-08T00:00:00", "id": "4b40721eacbcd4ab64361fd1e545c5ce", "metric_id": "121d2b49eaa2513e6933ef2fe32a6f47", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-07T00:00:00", "bucket_end": "2024-08-08T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 3, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-08T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-08T00:00:00", "end_time": "2024-08-09T00:00:00", "id": "ae6e0815173ef2df92c77e039c94702c", "metric_id": "7802f38c4ec801e284a71c0ad6191026", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-08T00:00:00", "bucket_end": "2024-08-09T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 4, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-09T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-09T00:00:00", "end_time": "2024-08-10T00:00:00", "id": "04d15836516837b36afb6b62206b6828", "metric_id": "38aa31cc443dbc0be8d4103644253bab", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-09T00:00:00", "bucket_end": "2024-08-10T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 5, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-10T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-10T00:00:00", "end_time": "2024-08-11T00:00:00", "id": "042fdcf2a095d82aece8a6874e67f698", "metric_id": "3498df239b5cd13f8e4b43501c835010", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-10T00:00:00", "bucket_end": "2024-08-11T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 6, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-11T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-11T00:00:00", "end_time": "2024-08-12T00:00:00", "id": "addb896d88b46ef0b8b31e94a07eba4e", "metric_id": "3a103f247254724e645df3463faf3e55", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-11T00:00:00", "bucket_end": "2024-08-12T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 7, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-12T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-12T00:00:00", "end_time": "2024-08-13T00:00:00", "id": "e7e82e0cbbd12413c072825c297ffc88", "metric_id": "134d4009d5805e1ce9ce24df7f062303", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-12T00:00:00", "bucket_end": "2024-08-13T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 8, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-13T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-13T00:00:00", "end_time": "2024-08-14T00:00:00", "id": "7eb604dba876a2c358912a2d8fe41496", "metric_id": "1e0eacf9e5039e7261548e4d18b04228", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-13T00:00:00", "bucket_end": "2024-08-14T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 9, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-14T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-14T00:00:00", "end_time": "2024-08-15T00:00:00", "id": "8c54a1374ead44b75f1eb1710617f205", "metric_id": "2b39525e4dc69e056af5864db9bb286a", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-14T00:00:00", "bucket_end": "2024-08-15T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 10, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-15T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-15T00:00:00", "end_time": "2024-08-16T00:00:00", "id": "c778ec5c1fc39633561a1a3bef7f7bc7", "metric_id": "590d8770e38c3f1a5694a8b80c248070", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-15T00:00:00", "bucket_end": "2024-08-16T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 11, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-16T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-16T00:00:00", "end_time": "2024-08-17T00:00:00", "id": "15efacf8ce2ee24b98be1da34bfae101", "metric_id": "86b486058658ba99b9528de9af6e9af7", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-16T00:00:00", "bucket_end": "2024-08-17T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 12, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-17T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-17T00:00:00", "end_time": "2024-08-18T00:00:00", "id": "795f69946d5fe92ea3f3eaa8ac45c5cc", "metric_id": "7c0b7d47eceaa9381bd04f80eb2a2f0a", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-17T00:00:00", "bucket_end": "2024-08-18T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 13, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-18T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-18T00:00:00", "end_time": "2024-08-19T00:00:00", "id": "6ddf70bf03e8fd154b7c9a79edbf0ae9", "metric_id": "7c00e686f72865bf2a04f7489fa385c5", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "detected_at": "2024-08-19T02:23:29.344439", "full_table_name": "DEMO_0819.PUBLIC.CUSTOMERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-18T00:00:00", "bucket_end": "2024-08-19T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 14, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-19T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}], "result_description": "The last row_count value is 0.000. The average for this metric is 0.000."}}], "model.elementary_tutorial.test4_volume_anomaly": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "elementary_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_volume_anomaly", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "fail", "model_unique_id": "model.elementary_tutorial.test4_volume_anomaly", "table_unique_id": "demo_0819.public.test4_volume_anomaly", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"anomaly_sensitivity": 1, "model": "{{ get_where_subquery(ref('test4_volume_anomaly')) }}", "timestamp_column": "birth", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 0.000. The average for this metric is 10.286.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": "birth", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_test", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Row Count", "metrics": [{"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-06T00:00:00", "end_time": "2024-08-07T00:00:00", "id": "08e032e884f1e655b3c51fc58e59c50f", "metric_id": "96010dc87af5fb92b4266759289b7a08", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-06T00:00:00", "bucket_end": "2024-08-07T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 2, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-07T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-07T00:00:00", "end_time": "2024-08-08T00:00:00", "id": "1bacd16925a6b8164cd27f902d5284d4", "metric_id": "153070c574d8a1753a1100c60abb5b81", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-07T00:00:00", "bucket_end": "2024-08-08T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 3, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-08T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-08T00:00:00", "end_time": "2024-08-09T00:00:00", "id": "7f65de65d50dbf9a11a349d07edb5eb8", "metric_id": "d8c977d0b04af08ef5b6bfd853aff6c7", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-08T00:00:00", "bucket_end": "2024-08-09T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 4, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-09T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-09T00:00:00", "end_time": "2024-08-10T00:00:00", "id": "b6f8c5ec8b12b07cbc2383476e925f06", "metric_id": "4f193cdacbacd952522a8a05097a85e4", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-09T00:00:00", "bucket_end": "2024-08-10T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 5, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-10T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-10T00:00:00", "end_time": "2024-08-11T00:00:00", "id": "cfe1f8ec8aeb81866b8732920b4628f3", "metric_id": "cb386952cea100d725e447584231af12", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-10T00:00:00", "bucket_end": "2024-08-11T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 6, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-11T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-11T00:00:00", "end_time": "2024-08-12T00:00:00", "id": "ae0065fd1d25c8ec40f24eebe64e4cb2", "metric_id": "760abbe4eb8270612c1822aeeefca322", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-11T00:00:00", "bucket_end": "2024-08-12T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 7, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-12T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-12T00:00:00", "end_time": "2024-08-13T00:00:00", "id": "57746d5e31b8c6d032b6a21a2ebd7764", "metric_id": "16af441d0fd2f8306d4577f6849de834", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-12T00:00:00", "bucket_end": "2024-08-13T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 8, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-13T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-13T00:00:00", "end_time": "2024-08-14T00:00:00", "id": "502e5e1837234d74d2af3a92494a2a66", "metric_id": "5a0d0d5635cd89445b1a3ea5851c9143", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-13T00:00:00", "bucket_end": "2024-08-14T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 9, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-14T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-14T00:00:00", "end_time": "2024-08-15T00:00:00", "id": "f3a303270a0b09e02461611bd1b7e33f", "metric_id": "366be3bd6dc037a170a9cbabba9357cd", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-14T00:00:00", "bucket_end": "2024-08-15T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 10, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-15T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-15T00:00:00", "end_time": "2024-08-16T00:00:00", "id": "b0ff951d904db390cbc58c6663830459", "metric_id": "a76f476469394841f226f4e2fdde81cd", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-15T00:00:00", "bucket_end": "2024-08-16T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 11, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-16T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-16T00:00:00", "end_time": "2024-08-17T00:00:00", "id": "ad85298ea8a097b2d18c144e428ea676", "metric_id": "8d800a4affc1b046917db3d6c6bf3d8b", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-16T00:00:00", "bucket_end": "2024-08-17T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 12, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-17T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 144.0, "average": 11.076923076923077, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-17T00:00:00", "end_time": "2024-08-18T00:00:00", "id": "33696dc45fb1b1077b7fe82e99b9b284", "metric_id": "316e5ac6375c270fb112950627ad998c", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": 3.328201177351375, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-17T00:00:00", "bucket_end": "2024-08-18T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 144.0, "min_metric_value": 0.0, "max_metric_value": 51.01533720513957, "training_avg": 11.076923076923077, "training_stddev": 39.9384141282165, "training_set_size": 13, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-18T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 144.000. The average for this metric is 11.077.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": true}, {"value": 0.0, "average": 10.285714285714286, "min_value": 0.0, "max_value": 48.771333121103396, "start_time": "2024-08-18T00:00:00", "end_time": "2024-08-19T00:00:00", "id": "3ced6a34b28991503784d19429204c83", "metric_id": "4456017a1fb4fcd641411ce89c3ddab1", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "detected_at": "2024-08-19T02:23:29.886986", "full_table_name": "DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY", "column_name": null, "metric_name": "row_count", "anomaly_score": -0.2672612419124244, "anomaly_score_threshold": 1, "anomalous_value": null, "bucket_start": "2024-08-18T00:00:00", "bucket_end": "2024-08-19T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 48.771333121103396, "training_avg": 10.285714285714286, "training_stddev": 38.48561883538911, "training_set_size": 14, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-19T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 10.286.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}], "result_description": "The last row_count value is 0.000. The average for this metric is 10.286."}}], "model.elementary_tutorial.test_practice": [{"metadata": {"test_unique_id": "test.elementary_tutorial.test4_dbt_test", "elementary_unique_id": "test.elementary_tutorial.test4_dbt_test.None.singular", "database_name": "demo_0819", "schema_name": "public", "table_name": "test_practice", "column_name": null, "test_name": "test4_dbt_test", "test_display_name": "Test4 Dbt Test", "original_path": "tests/test4_dbt_test.sql", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "fail", "model_unique_id": "model.elementary_tutorial.test_practice", "table_unique_id": "demo_0819.public.test_practice", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count"}, "configuration": {"test_name": "test4_dbt_test", "test_params": {}}, "test_tags": [], "normalized_full_path": "elementary_tutorial/tests/test4_dbt_test.sql"}, "test_results": {"display_name": "test4_dbt_test", "results_sample": [{"actual_count": 583, "expected_count": 300}], "error_message": "Got 1 result, configured to fail if != 0", "failed_rows_count": 1}}], "model.elementary_tutorial.returned_orders": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "elementary_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "returned_orders", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.returned_orders", "table_unique_id": "demo_0819.public.returned_orders", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"timestamp_column": "order_date", "model": "{{ get_where_subquery(ref('returned_orders')) }}", "where_expression": null, "anomaly_sensitivity": 3, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": "order_date", "testing_timeframe": "1 day", "anomaly_threshold": 3}, "test_tags": ["elementary-tests", "table_anomalies"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_results": {"display_name": "Row Count", "metrics": [{"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-06T00:00:00", "end_time": "2024-08-07T00:00:00", "id": "3130049a279616c016e6c5ae54453c62", "metric_id": "48996974c39b647abb0971b36df2cb11", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-06T00:00:00", "bucket_end": "2024-08-07T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 2, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-07T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-07T00:00:00", "end_time": "2024-08-08T00:00:00", "id": "c4659d1439c2fa8c51e6b4e621eda1f0", "metric_id": "d290e8b6f9ca876ef105c04b5f561984", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-07T00:00:00", "bucket_end": "2024-08-08T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 3, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-08T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-08T00:00:00", "end_time": "2024-08-09T00:00:00", "id": "ad1342ffe8294dd39d19fbd58f009dc3", "metric_id": "09ce18b53e0f7e67cac0ffc6f36d7f93", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-08T00:00:00", "bucket_end": "2024-08-09T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 4, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-09T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-09T00:00:00", "end_time": "2024-08-10T00:00:00", "id": "2f949ae7c40a76098749ef7039f2ab6f", "metric_id": "3b8b88e1121e5bd50647b959d014c0e3", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-09T00:00:00", "bucket_end": "2024-08-10T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 5, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-10T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-10T00:00:00", "end_time": "2024-08-11T00:00:00", "id": "a5e937da00eb455e62d5b8250b1ce283", "metric_id": "04db7b311323b3843d0c5d46fb40ad6e", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-10T00:00:00", "bucket_end": "2024-08-11T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 6, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-11T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-11T00:00:00", "end_time": "2024-08-12T00:00:00", "id": "c97cdb7bc06d256c32dbb9393f3b7c09", "metric_id": "622b1a721beee3d1bcefd8ea8ee213eb", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-11T00:00:00", "bucket_end": "2024-08-12T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 7, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-12T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-12T00:00:00", "end_time": "2024-08-13T00:00:00", "id": "5f582b8de37d3c19f58c979c474109dc", "metric_id": "27f8fa5835a5fcb6448ba1dcb046df89", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-12T00:00:00", "bucket_end": "2024-08-13T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 8, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-13T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-13T00:00:00", "end_time": "2024-08-14T00:00:00", "id": "8b80411d128e5870a3fdab2924df76b6", "metric_id": "1a3a427497d64fa03d19f5c609dac3d2", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-13T00:00:00", "bucket_end": "2024-08-14T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 9, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-14T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-14T00:00:00", "end_time": "2024-08-15T00:00:00", "id": "6d0af0feae0c9e52409d7d44d9d7149c", "metric_id": "e95fe5d7b0bd4ca5b2f6f886a4b075ae", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-14T00:00:00", "bucket_end": "2024-08-15T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 10, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-15T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-15T00:00:00", "end_time": "2024-08-16T00:00:00", "id": "208c42c67d1666d331296772cfd4e97f", "metric_id": "514e5650529fc063197040313587d7f0", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-15T00:00:00", "bucket_end": "2024-08-16T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 11, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-16T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-16T00:00:00", "end_time": "2024-08-17T00:00:00", "id": "e1b8aef9217575aa2d71deb963cc6683", "metric_id": "e92235b400b2159c2d22f8bd79462c0e", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-16T00:00:00", "bucket_end": "2024-08-17T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 12, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-17T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-17T00:00:00", "end_time": "2024-08-18T00:00:00", "id": "6c410a6ee80da01c123d792d41a60e07", "metric_id": "ffb9dc048a2831ae5b1c3d42570f471b", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-17T00:00:00", "bucket_end": "2024-08-18T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 13, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-18T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}, {"value": 0.0, "average": 0.0, "min_value": 0.0, "max_value": 0.0, "start_time": "2024-08-18T00:00:00", "end_time": "2024-08-19T00:00:00", "id": "3f99571347885cfb9d28db21c66a6967", "metric_id": "c5c02803852704d321e1044f687d2ee3", "test_execution_id": "e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "detected_at": "2024-08-19T02:23:29.647770", "full_table_name": "DEMO_0819.PUBLIC.RETURNED_ORDERS", "column_name": null, "metric_name": "row_count", "anomaly_score": 0.0, "anomaly_score_threshold": 3, "anomalous_value": null, "bucket_start": "2024-08-18T00:00:00", "bucket_end": "2024-08-19T00:00:00", "bucket_seasonality": "no_seasonality", "metric_value": 0.0, "min_metric_value": 0.0, "max_metric_value": 0.0, "training_avg": 0.0, "training_stddev": 0.0, "training_set_size": 14, "training_start": "2024-08-06T00:00:00", "training_end": "2024-08-19T00:00:00", "dimension": null, "dimension_value": null, "anomaly_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "max_bucket_end": "2024-08-19T00:00:00", "is_anomalous": false}], "result_description": "The last row_count value is 0.000. The average for this metric is 0.000."}}]}, "test_results_totals": {"model.elementary_tutorial.orders": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}, "model.elementary_tutorial.test4schema": {"errors": 0, "warnings": 3, "passed": 0, "failures": 0}, "model.elementary_tutorial.test4_column_anomaly": {"errors": 0, "warnings": 0, "passed": 4, "failures": 0}, "test.elementary_tutorial.test4_dbt_test": {"errors": 0, "warnings": 0, "passed": 0, "failures": 1}, "model.elementary_tutorial.customers": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.test4_volume_anomaly": {"errors": 0, "warnings": 0, "passed": 0, "failures": 1}, "model.elementary_tutorial.test_practice": {"errors": 0, "warnings": 0, "passed": 0, "failures": 1}, "model.elementary_tutorial.returned_orders": {"errors": 0, "warnings": 0, "passed": 1, "failures": 0}}, "test_runs": {"model.elementary_tutorial.orders": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371", "elementary_unique_id": "test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371", "database_name": "demo_0819", "schema_name": "public", "table_name": "orders", "column_name": null, "test_name": "dimension_anomalies", "test_display_name": "Dimension Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.orders", "table_unique_id": "demo_0819.public.orders", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022328857867\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"dimensions": ["status"], "model": "{{ get_where_subquery(ref('orders')) }}"}, "test_created_at": null, "description": "Monitors the frequency of values in the configured dimensions over time.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022328857867\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "dimension_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 5, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:48+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:21:00+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:45+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:55+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:30+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}], "model.elementary_tutorial.test4schema": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "elementary_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "database_name": "DEMO_0819", "schema_name": "PUBLIC", "table_name": "TEST4SCHEMA", "column_name": "id", "test_name": "schema_changes", "test_display_name": "Schema Changes", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "warn", "model_unique_id": "model.elementary_tutorial.test4schema", "table_unique_id": "demo_0819.public.test4schema", "test_type": "schema_change", "test_sub_type": "column_removed", "test_query": null, "test_params": {"model": "{{ get_where_subquery(ref('test4schema')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": "The column \"id\" was removed", "result_query": null}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 1, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:48+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:21:00+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:45+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:55+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:29+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "warn", "execution_time": null}], "description": "There were no failures, no errors and 1 warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "elementary_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "database_name": "DEMO_0819", "schema_name": "PUBLIC", "table_name": "TEST4SCHEMA", "column_name": "birth", "test_name": "schema_changes", "test_display_name": "Schema Changes", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "warn", "model_unique_id": "model.elementary_tutorial.test4schema", "table_unique_id": "demo_0819.public.test4schema", "test_type": "schema_change", "test_sub_type": "column_removed", "test_query": null, "test_params": {"model": "{{ get_where_subquery(ref('test4schema')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": "The column \"birth\" was removed", "result_query": null}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 1, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:48+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:21:00+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:45+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:55+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:29+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "warn", "execution_time": null}], "description": "There were no failures, no errors and 1 warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "elementary_unique_id": "test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366", "database_name": "DEMO_0819", "schema_name": "PUBLIC", "table_name": "TEST4SCHEMA", "column_name": "name", "test_name": "schema_changes", "test_display_name": "Schema Changes", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "warn", "model_unique_id": "model.elementary_tutorial.test4schema", "table_unique_id": "demo_0819.public.test4schema", "test_type": "schema_change", "test_sub_type": "column_removed", "test_query": null, "test_params": {"model": "{{ get_where_subquery(ref('test4schema')) }}"}, "test_created_at": null, "description": "Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.", "result": {"result_description": "The column \"name\" was removed", "result_query": null}, "configuration": {"test_name": "schema_changes", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["elementary", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 1, "passed": 4, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:48+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:21:00+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:45+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:55+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:29+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "warn", "execution_time": null}], "description": "There were no failures, no errors and 1 warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}], "model.elementary_tutorial.test4_column_anomaly": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "name", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:21:00+08:00", "latest_run_time_utc": "2024-08-19T02:21:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"column_anomalies": ["null_count"], "anomaly_sensitivity": 1, "column_name": "name", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_anomalies", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:48+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:21:00+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "name", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:28+08:00", "latest_run_time_utc": "2024-08-19T02:23:28+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "null_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('null_count' as varchar(4096))\n          and upper(column_name) = upper(cast('name' as varchar(4096)))", "test_params": {"column_anomalies": ["null_count"], "anomaly_sensitivity": 1, "column_name": "name", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}", "timestamp_column": "birth", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": "Not enough data to calculate anomaly score.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('null_count' as varchar(4096))\n          and upper(column_name) = upper(cast('name' as varchar(4096)))"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": "birth", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_anomalies", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:22:42+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:53+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:28+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 3 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "age", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:21:00+08:00", "latest_run_time_utc": "2024-08-19T02:21:00+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"column_anomalies": ["zero_count", "max"], "anomaly_sensitivity": 1, "column_name": "age", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 1\n    else\n        \n        abs(anomaly_score) > 1\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": null, "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_test", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:48+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:21:00+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 2 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_column_anomaly", "column_name": "age", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:28+08:00", "latest_run_time_utc": "2024-08-19T02:23:28+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.test4_column_anomaly", "table_unique_id": "demo_0819.public.test4_column_anomaly", "test_type": "anomaly_detection", "test_sub_type": "zero_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('zero_count' as varchar(4096))\n          and upper(column_name) = upper(cast('age' as varchar(4096)))", "test_params": {"column_anomalies": ["zero_count", "max"], "anomaly_sensitivity": 1, "column_name": "age", "model": "{{ get_where_subquery(ref('test4_column_anomaly')) }}", "timestamp_column": "birth", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": "Not enough data to calculate anomaly score.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\n        metric_name = cast('zero_count' as varchar(4096))\n          and upper(column_name) = upper(cast('age' as varchar(4096)))"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": "birth", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_test", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 3, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:22:42+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:53+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:28+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 3 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}], "test.elementary_tutorial.test4_dbt_test": [{"metadata": {"test_unique_id": "test.elementary_tutorial.test4_dbt_test", "elementary_unique_id": "test.elementary_tutorial.test4_dbt_test.None.singular", "database_name": "demo_0819", "schema_name": "public", "table_name": "test_practice", "column_name": null, "test_name": "test4_dbt_test", "test_display_name": "Test4 Dbt Test", "original_path": "tests/test4_dbt_test.sql", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "fail", "model_unique_id": "model.elementary_tutorial.test_practice", "table_unique_id": "demo_0819.public.test_practice", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count"}, "configuration": {"test_name": "test4_dbt_test", "test_params": {}}, "test_tags": [], "normalized_full_path": "elementary_tutorial/tests/test4_dbt_test.sql"}, "test_runs": {"fail_rate": 1.0, "totals": {"errors": 0, "warnings": 0, "passed": 0, "failures": 5}, "invocations": [{"affected_rows": 1, "time_utc": "2024-08-19T02:17:47+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:20:59+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:22:44+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:22:54+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:23:30+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "fail", "execution_time": null}], "description": "There were 5 failures, no errors and no warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}], "model.elementary_tutorial.customers": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381", "elementary_unique_id": "test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic", "database_name": "demo_0819", "schema_name": "public", "table_name": "customers", "column_name": "number_of_orders", "test_name": "column_anomalies", "test_display_name": "Column Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.customers", "table_unique_id": "demo_0819.public.customers", "test_type": "anomaly_detection", "test_sub_type": "generic", "test_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_e012735381_eleme__anomaly_scores__tmp_20240819022327905424\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true", "test_params": {"column_anomalies": ["zero_count"], "timestamp_column": "signup_date", "column_name": "number_of_orders", "model": "{{ get_where_subquery(ref('customers')) }}"}, "test_created_at": null, "description": "Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.", "result": {"result_description": null, "result_query": "select * from (with anomaly_scores as (\n        select\n            id,\n            metric_id,\n            test_execution_id,\n            test_unique_id,\n            detected_at,\n            full_table_name,\n            column_name,\n            metric_name,\n            anomaly_score,\n            anomaly_score_threshold,\n            anomalous_value,\n            bucket_start,\n            bucket_end,\n            bucket_seasonality,\n            metric_value,\n            min_metric_value,\n            max_metric_value,\n            training_avg,\n            training_stddev,\n            training_set_size,\n            training_start,\n            training_end,\n            dimension,\n            dimension_value,\n            \n    case\n        when dimension is not null and column_name is null then \n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when dimension is not null and column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when metric_name = 'freshness' then \n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\n\n        when column_name is null then \n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        when column_name is not null then \n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\n\n        else null\n    end as anomaly_description\n,\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\n        from \"demo_0819\".\"public\".\"test_e012735381_eleme__anomaly_scores__tmp_20240819022327905424\"\n      ),\n      anomaly_scores_with_is_anomalous as (\n        select\n          *,\ncase when\n          (\n            \n  (anomaly_score is not null and\n  (\n    \n  (\n    metric_value = 0 and \n    \n      1 = 2\n    \n  )\n or\n    (\n      case when metric_name IN \n        ( 'freshness' ,  'event_freshness'  )\n then\n            anomaly_score > 3\n    else\n        \n        abs(anomaly_score) > 3\n    \n\n     end and\n      (\n  \n  \n  \n  \n    \n        (1 = 1)\n    \n\n    and\n\n    \n        (1 = 1)\n    \n  \n  )\n    )\n  ))\n\n          )\n          and bucket_end >= \n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\n\n          then TRUE else FALSE end as is_anomalous\n        from anomaly_scores\n      ),\n\n      final_results as (\n          select\n          metric_value as value,\n          training_avg as average,\n          \n          case\n          when is_anomalous = TRUE and 'both' = 'spike' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'spike' then\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'spike' then metric_value\n          else min_metric_value end as min_value,\n          case\n          when is_anomalous = TRUE and 'both' = 'drop' then\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when is_anomalous = TRUE and 'both' != 'drop' then\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\n          when 'both' = 'drop' then metric_value\n          else max_metric_value end as max_value,\n          bucket_start as start_time,\n          bucket_end as end_time,\n          *\n        from anomaly_scores_with_is_anomalous\n        order by bucket_end, dimension_value\n      )\n\n      select * from final_results\n      where 1 = 1) results\n    where is_anomalous = true"}, "configuration": {"test_name": "column_anomalies", "timestamp_column": "signup_date", "testing_timeframe": "1 day", "anomaly_threshold": null}, "test_tags": ["column_anomalies", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 5, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:48+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:21:00+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:45+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:55+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:30+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}, {"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c", "elementary_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "customers", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.customers", "table_unique_id": "demo_0819.public.customers", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"anomaly_sensitivity": 1, "model": "{{ get_where_subquery(ref('customers')) }}", "timestamp_column": "signup_date", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": "signup_date", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["elementary-tests", "volume_anomalies"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 5, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:47+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:20:58+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:43+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:54+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:29+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}], "model.elementary_tutorial.test4_volume_anomaly": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd", "elementary_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "test4_volume_anomaly", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "fail", "model_unique_id": "model.elementary_tutorial.test4_volume_anomaly", "table_unique_id": "demo_0819.public.test4_volume_anomaly", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"anomaly_sensitivity": 1, "model": "{{ get_where_subquery(ref('test4_volume_anomaly')) }}", "timestamp_column": "birth", "where_expression": null, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 0.000. The average for this metric is 10.286.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": "birth", "testing_timeframe": "1 day", "anomaly_threshold": 1}, "test_tags": ["column_test", "elementary-tests"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.6, "totals": {"errors": 0, "warnings": 0, "passed": 2, "failures": 3}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:47+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:20:59+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:44+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "fail", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:54+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "fail", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:29+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "fail", "execution_time": null}], "description": "There were 3 failures, no errors and no warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}], "model.elementary_tutorial.test_practice": [{"metadata": {"test_unique_id": "test.elementary_tutorial.test4_dbt_test", "elementary_unique_id": "test.elementary_tutorial.test4_dbt_test.None.singular", "database_name": "demo_0819", "schema_name": "public", "table_name": "test_practice", "column_name": null, "test_name": "test4_dbt_test", "test_display_name": "Test4 Dbt Test", "original_path": "tests/test4_dbt_test.sql", "latest_run_time": "2024-08-19T10:23:30+08:00", "latest_run_time_utc": "2024-08-19T02:23:30+00:00", "latest_run_status": "fail", "model_unique_id": "model.elementary_tutorial.test_practice", "table_unique_id": "demo_0819.public.test_practice", "test_type": "dbt_test", "test_sub_type": "singular", "test_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count", "test_params": {}, "test_created_at": null, "description": null, "result": {"result_description": "Got 1 result, configured to fail if != 0", "result_query": "-- tests/check_record_count.sql\n\nwith actual_count as (\n    select\n        count(*) as actual_count\n    from \"demo_0819\".\"public\".\"test_practice\"\n),\nexpected_count as (\n    select 300 as expected_count\n)\n\nselect\n    actual_count,\n    expected_count\nfrom actual_count, expected_count\nwhere actual_count != expected_count"}, "configuration": {"test_name": "test4_dbt_test", "test_params": {}}, "test_tags": [], "normalized_full_path": "elementary_tutorial/tests/test4_dbt_test.sql"}, "test_runs": {"fail_rate": 1.0, "totals": {"errors": 0, "warnings": 0, "passed": 0, "failures": 5}, "invocations": [{"affected_rows": 1, "time_utc": "2024-08-19T02:17:47+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:20:59+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:22:44+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:22:54+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "fail", "execution_time": null}, {"affected_rows": 1, "time_utc": "2024-08-19T02:23:30+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "fail", "execution_time": null}], "description": "There were 5 failures, no errors and no warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}], "model.elementary_tutorial.returned_orders": [{"metadata": {"test_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e", "elementary_unique_id": "test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count", "database_name": "demo_0819", "schema_name": "public", "table_name": "returned_orders", "column_name": null, "test_name": "volume_anomalies", "test_display_name": "Volume Anomalies", "original_path": "models/schema.yml", "latest_run_time": "2024-08-19T10:23:29+08:00", "latest_run_time_utc": "2024-08-19T02:23:29+00:00", "latest_run_status": "pass", "model_unique_id": "model.elementary_tutorial.returned_orders", "table_unique_id": "demo_0819.public.returned_orders", "test_type": "anomaly_detection", "test_sub_type": "row_count", "test_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))", "test_params": {"timestamp_column": "order_date", "model": "{{ get_where_subquery(ref('returned_orders')) }}", "where_expression": null, "anomaly_sensitivity": 3, "anomaly_direction": "both", "time_bucket": {"period": "day", "count": 1}, "days_back": 14, "backfill_days": 2, "seasonality": null, "freshness_column": null, "event_timestamp_column": null, "dimensions": null, "ignore_small_changes": {"spike_failure_percent_threshold": null, "drop_failure_percent_threshold": null}, "fail_on_zero": false, "detection_delay": {"period": "hour", "count": 0}, "anomaly_exclude_metrics": null, "exclude_final_results": "1 = 1"}, "test_created_at": null, "description": "Monitors the row count of your table over time.", "result": {"result_description": "The last row_count value is 0.000. The average for this metric is 0.000.", "result_query": "select * from (None) results\n      where\n        anomaly_score is not null and\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\n        metric_name = cast('row_count' as varchar(4096))"}, "configuration": {"test_name": "volume_anomalies", "timestamp_column": "order_date", "testing_timeframe": "1 day", "anomaly_threshold": 3}, "test_tags": ["elementary-tests", "table_anomalies"], "normalized_full_path": "elementary_tutorial/models/schema.yml"}, "test_runs": {"fail_rate": 0.0, "totals": {"errors": 0, "warnings": 0, "passed": 5, "failures": 0}, "invocations": [{"affected_rows": null, "time_utc": "2024-08-19T02:17:47+00:00", "id": "1c9e7708-d20d-4990-a83c-f38f1397061f", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:20:58+00:00", "id": "db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:43+00:00", "id": "67d3fdfc-2d42-4172-b41b-86cdea3b03dc", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:22:54+00:00", "id": "5ff98345-a1ab-4123-97a2-4f87e1467a57", "status": "pass", "execution_time": null}, {"affected_rows": null, "time_utc": "2024-08-19T02:23:29+00:00", "id": "e33831e9-b2da-4780-a97c-5dc013c21c55", "status": "pass", "execution_time": null}], "description": "There were no failures, no errors and no warnings on the last 5 test runs."}, "median_exec_time": 0.0, "last_exec_time": null}]}, "test_runs_totals": {"model.elementary_tutorial.orders": {"errors": 0, "warnings": 0, "passed": 5, "failures": 0}, "model.elementary_tutorial.test4schema": {"errors": 0, "warnings": 3, "passed": 12, "failures": 0}, "model.elementary_tutorial.test4_column_anomaly": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "test.elementary_tutorial.test4_dbt_test": {"errors": 0, "warnings": 0, "passed": 0, "failures": 5}, "model.elementary_tutorial.customers": {"errors": 0, "warnings": 0, "passed": 10, "failures": 0}, "model.elementary_tutorial.test4_volume_anomaly": {"errors": 0, "warnings": 0, "passed": 2, "failures": 3}, "model.elementary_tutorial.test_practice": {"errors": 0, "warnings": 0, "passed": 0, "failures": 5}, "model.elementary_tutorial.returned_orders": {"errors": 0, "warnings": 0, "passed": 5, "failures": 0}}, "coverages": {"model.elementary_tutorial.customers": {"table_tests": 1, "column_tests": 1}, "model.elementary_tutorial.orders": {"table_tests": 1, "column_tests": 0}, "model.elementary_tutorial.returned_orders": {"table_tests": 1, "column_tests": 0}, "model.elementary_tutorial.test4_column_anomaly": {"table_tests": 0, "column_tests": 2}, "model.elementary_tutorial.test4schema": {"table_tests": 1, "column_tests": 0}, "model.elementary_tutorial.test4_volume_anomaly": {"table_tests": 1, "column_tests": 0}, "model.elementary_tutorial.test_practice": {"table_tests": 1, "column_tests": 0}}, "model_runs": [{"unique_id": "model.elementary_tutorial.stg_customers", "schema": "public", "name": "stg_customers", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "-- depends_on: \"demo_0819\".\"public\".\"customers_validation\"\n\n\n    with source as (\n        select * from \"demo_0819\".\"public\".\"customers_training\"\n    ),\n\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.stg_orders", "schema": "public", "name": "stg_orders", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "-- depends_on: \"demo_0819\".\"public\".\"orders_validation\"\n\n\n    with source as (\n        select * from \"demo_0819\".\"public\".\"orders_training\"\n    ),\n\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.stg_payments", "schema": "public", "name": "stg_payments", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "-- depends_on: \"demo_0819\".\"public\".\"payments_validation\"\n\n\n    with source as (\n        select * from \"demo_0819\".\"public\".\"payments_training\"\n    ),\n\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.stg_signups", "schema": "public", "name": "stg_signups", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "-- depends_on: \"demo_0819\".\"public\".\"signups_validation\"\n\n\n    with source as (\n        select * from \"demo_0819\".\"public\".\"signups_training\"\n    ),\n\n\nrenamed as (\n\n    select\n        id as signup_id,\n        user_id as customer_id,\n        user_email as customer_email,\n        hashed_password,\n        signup_date\n\n    from source\n\n)\n\nselect * from renamed", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.test_practice", "schema": "public", "name": "test_practice", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "-- depends_on: \"demo_0819\".\"public\".\"customers_validation\"\n\nwith source as (\n    select * from \"demo_0819\".\"public\".\"test_training\"\n),\n\nrenamed as (\n    select\n    *\n    from source\n)\n\nselect * from renamed", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.test_volume", "schema": "public", "name": "test_volume", "status": "success", "last_exec_time": 0.2, "median_exec_time": 0.15000000000000002, "compiled_code": "-- depends_on: \"demo_0819\".\"public\".\"test_dataset\"\n\nwith source as (\n    select * from \"demo_0819\".\"public\".\"test_dataset\"\n),\n\nrenamed as (\n    select\n    *\n    from source\n)\n\nselect * from renamed", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 33.33333333333333, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.2}]}, {"unique_id": "model.elementary_tutorial.orders", "schema": "public", "name": "orders", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "\n\nwith orders as (\n\n    select * from \"demo_0819\".\"public\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"demo_0819\".\"public\".\"stg_payments\"\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.customers", "schema": "public", "name": "customers", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.15000000000000002, "compiled_code": "with customers as (\n\n    select * from \"demo_0819\".\"public\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"demo_0819\".\"public\".\"stg_orders\"\n\n),\n\npayments as (\n\n    select * from \"demo_0819\".\"public\".\"stg_payments\"\n\n),\n\nsignups as (\n\n    select * from \"demo_0819\".\"public\".\"stg_signups\"\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        case\n            when customer_orders.number_of_orders is null then 0\n            else customer_orders.number_of_orders\n        end as number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value,\n        signups.customer_email,\n        \n        signups.signup_date\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n    left join signups\n        on customers.customer_id = signups.customer_id\n\n)\n\nselect * from final", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": -33.333333333333336, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.2}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.test4_column_anomaly", "schema": "public", "name": "test4_column_anomaly", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "with orders as (\n\n    select * from \"demo_0819\".\"public\".\"test_practice\"\n\n),\n\nfinal as (\n\n    select\n    *\n    from orders\n)\n\nselect * from final", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.test4_volume_anomaly", "schema": "public", "name": "test4_volume_anomaly", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "with orders as (\n\n    select * from \"demo_0819\".\"public\".\"test_volume\"\n\n),\n\nfinal as (\n\n    select\n    *\n    from orders\n)\n\nselect * from final", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.returned_orders", "schema": "public", "name": "returned_orders", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "\n\nwith orders as (\n    select *\n    from \"demo_0819\".\"public\".\"orders\"\n)\n\nselect *\nfrom orders\nwhere status = 'return_pending' or status = 'returned'", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}, {"unique_id": "model.elementary_tutorial.test4schema", "schema": "public", "name": "test4schema", "status": "success", "last_exec_time": 0.1, "median_exec_time": 0.1, "compiled_code": "with orders as (\n\n    select * from \"demo_0819\".\"public\".\"test4_column_anomaly\"\n\n),\n\nfinal as (\n\n    select\n    age\n    from orders\n)\n\nselect * from final", "last_generated_at": "2024-08-19T02:23:10+00:00", "exec_time_change_rate": 0.0, "totals": {"errors": 0, "success": 2}, "runs": [{"id": "49e61e13-d6a0-4837-a9b4-1b2f6b130d84", "time_utc": "2024-08-19T02:17:36+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}, {"id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "time_utc": "2024-08-19T02:23:10+00:00", "status": "success", "full_refresh": false, "materialization": "view", "execution_time": 0.1}]}], "model_runs_totals": {"model.elementary_tutorial.stg_customers": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.stg_orders": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.stg_payments": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.stg_signups": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.test_practice": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.test_volume": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.orders": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.customers": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.test4_column_anomaly": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.test4_volume_anomaly": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.returned_orders": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}, "model.elementary_tutorial.test4schema": {"errors": 0, "warnings": 0, "passed": 2, "failures": 0}}, "filters": {"test_results": [{"name": "failures", "display_name": "Failures", "model_unique_ids": ["model.elementary_tutorial.test4_volume_anomaly", "model.elementary_tutorial.test_practice", "test.elementary_tutorial.test4_dbt_test"]}, {"name": "warnings", "display_name": "Warnings", "model_unique_ids": ["model.elementary_tutorial.test4schema"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.elementary_tutorial.orders", "model.elementary_tutorial.customers", "model.elementary_tutorial.returned_orders", "model.elementary_tutorial.test4_column_anomaly"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.elementary_tutorial.stg_payments", "model.elementary_tutorial.stg_signups", "model.elementary_tutorial.test_volume", "model.elementary_tutorial.stg_customers", "model.elementary_tutorial.stg_orders"]}], "test_runs": [{"name": "failures", "display_name": "Failures", "model_unique_ids": ["model.elementary_tutorial.test4_volume_anomaly", "model.elementary_tutorial.test_practice", "test.elementary_tutorial.test4_dbt_test"]}, {"name": "warnings", "display_name": "Warnings", "model_unique_ids": ["model.elementary_tutorial.test4schema"]}, {"name": "passed", "display_name": "Passed", "model_unique_ids": ["model.elementary_tutorial.orders", "model.elementary_tutorial.test4schema", "model.elementary_tutorial.test4_column_anomaly", "model.elementary_tutorial.customers", "model.elementary_tutorial.test4_volume_anomaly", "model.elementary_tutorial.returned_orders"]}, {"name": "no_test", "display_name": "No Tests", "model_unique_ids": ["model.elementary_tutorial.stg_payments", "model.elementary_tutorial.stg_signups", "model.elementary_tutorial.test_volume", "model.elementary_tutorial.stg_customers", "model.elementary_tutorial.stg_orders"]}], "model_runs": [{"name": "success", "display_name": "Successful Runs", "model_unique_ids": ["model.elementary_tutorial.orders", "model.elementary_tutorial.test4schema", "model.elementary_tutorial.stg_payments", "model.elementary_tutorial.test4_column_anomaly", "model.elementary_tutorial.stg_signups", "model.elementary_tutorial.test_volume", "model.elementary_tutorial.customers", "model.elementary_tutorial.stg_customers", "model.elementary_tutorial.test4_volume_anomaly", "model.elementary_tutorial.test_practice", "model.elementary_tutorial.stg_orders", "model.elementary_tutorial.returned_orders"]}]}, "lineage": {"nodes": [{"id": "model.elementary_tutorial.returned_orders", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.test4_volume_anomaly", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.customers", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.orders", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.test4_column_anomaly", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.stg_customers", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.test_practice", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.stg_payments", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.stg_orders", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.stg_signups", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.test_volume", "type": "model", "sub_type": "view"}, {"id": "model.elementary_tutorial.test4schema", "type": "model", "sub_type": "view"}], "edges": [["model.elementary_tutorial.returned_orders", "model.elementary_tutorial.orders"], ["model.elementary_tutorial.orders", "model.elementary_tutorial.stg_orders"], ["model.elementary_tutorial.orders", "model.elementary_tutorial.stg_payments"], ["model.elementary_tutorial.test4_volume_anomaly", "model.elementary_tutorial.test_volume"], ["model.elementary_tutorial.customers", "model.elementary_tutorial.stg_customers"], ["model.elementary_tutorial.customers", "model.elementary_tutorial.stg_orders"], ["model.elementary_tutorial.customers", "model.elementary_tutorial.stg_payments"], ["model.elementary_tutorial.customers", "model.elementary_tutorial.stg_signups"], ["model.elementary_tutorial.test4_column_anomaly", "model.elementary_tutorial.test_practice"], ["model.elementary_tutorial.test4schema", "model.elementary_tutorial.test4_column_anomaly"]]}, "invocations": [{"invocation_id": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "detected_at": null, "command": "run", "selected": "", "full_refresh": false, "job_url": null, "job_name": null, "job_id": null, "orchestrator": null}], "resources_latest_invocation": {"model.elementary.alerts_anomaly_detection": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.alerts_dbt_models": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.alerts_dbt_source_freshness": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.alerts_dbt_tests": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.alerts_schema_changes": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.anomaly_threshold_sensitivity": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.data_monitoring_metrics": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_artifacts_hashes": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_columns": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_exposures": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_invocations": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_metrics": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_models": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_run_results": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_seeds": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_snapshots": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_source_freshness_results": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_sources": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.dbt_tests": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.elementary_test_results": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.job_run_results": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.metadata": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.metrics_anomaly_score": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.model_run_results": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.monitors_runs": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.schema_columns_snapshot": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.snapshot_run_results": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary.test_result_rows": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.customers": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.orders": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.returned_orders": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.stg_customers": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.stg_orders": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.stg_payments": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.stg_signups": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.test4_column_anomaly": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.test4schema": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.test4_volume_anomaly": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.test_practice": "b15f46e3-0e7f-450c-80ca-d64788f37dff", "model.elementary_tutorial.test_volume": "b15f46e3-0e7f-450c-80ca-d64788f37dff"}, "invocations_job_identification": {}, "env": {"project_name": "elementary_tutorial", "env": "dev", "warehouse_type": "postgres"}, "tracking": {"posthog_api_key": "phc_56XBEzZmh02mGkadqLiYW51eECyYKWPyecVwkGdGUfg", "report_generator_anonymous_user_id": "47e68f9f-108e-4fe3-88cb-b43b9e5726c8", "anonymous_warehouse_id": "49960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d9763"}}