{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.033806Z"}}
{"data": {"elapsed": 0.004257346, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "SQL status: SELECT 51 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.044993Z"}}
{"data": {"database": "elementary_demo", "relations": [{"database": "elementary_demo", "identifier": "metadata", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_exposures", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_seeds", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "elementary_test_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_result_rows", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_dataset", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_invocations", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_sources", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_columns", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_payments", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_signups", "schema": "public"}, {"database": "elementary_demo", "identifier": "monitors_runs", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "returned_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_practice", "schema": "public"}, {"database": "elementary_demo", "identifier": "job_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4schema", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_volume", "schema": "public"}, {"database": "elementary_demo", "identifier": "model_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "While listing relations in database=elementary_demo, schema=public, found: metadata, dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_result_rows, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metrics_anomaly_score, stg_payments, customers, snapshot_run_results, alerts_dbt_tests, alerts_dbt_models, stg_signups, monitors_runs, alerts_schema_changes, alerts_dbt_source_freshness, test4_column_anomaly, returned_orders, stg_customers, test_practice, job_run_results, dbt_artifacts_hashes, test4schema, test4_volume_anomaly, stg_orders, test_volume, model_run_results, alerts_anomaly_detection, orders, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.057413Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.064444Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"elementary_demo\".\"public\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"elementary_demo\".\"public\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.065092Z"}}
{"data": {"elapsed": 0.0027982541, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "SQL status: SELECT 0 in 0.003 seconds", "name": "SQLQueryStatus", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.068635Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.076423Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.077149Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.078840Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3197453, "process_in_blocks": "0", "process_kernel_time": 0.391969, "process_mem_max_rss": "123416576", "process_out_blocks": "0", "process_user_time": 2.751601}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3197453, \"process_user_time\": 2.751601, \"process_kernel_time\": 0.391969, \"process_mem_max_rss\": \"123416576\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.089092Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:08.089859Z", "elapsed": 1.3206847, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:08.089859 after 1.32 seconds", "name": "CommandCompleted", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.089978Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.090612Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110476380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e328400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef79180>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110476380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e328400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef79180>]}", "name": "SendingEvent", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.091139Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "65642a3d-e4b4-47e2-b989-73650c207289", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47002, "thread": "MainThread", "ts": "2024-08-19T01:29:08.091725Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119d32350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b4697e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b469ea0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119d32350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b4697e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b469ea0>]}", "name": "SendingEvent", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.164355Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.171551Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.172631Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119dc72e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119dc72e0>]}", "name": "SendingEvent", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.391754Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ae887c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ae887c0>]}", "name": "SendingEvent", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.457502Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.458956Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.489568Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.853511Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:11.854584Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c53ce20>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c53ce20>]}", "name": "SendingEvent", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.007411Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4a7cd0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4a7cd0>]}", "name": "SendingEvent", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.361848Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.363022Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4f4fa0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'ea196036-72a8-4268-868b-b8e073aa42b7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4f4fa0>]}", "name": "SendingEvent", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.363828Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.364838Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.365500Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.366354Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.367607Z"}}
{"data": {"elapsed": 0.05945803, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: BEGIN in 0.059 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.427138Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.428304Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.429106Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.429876Z"}}
{"data": {"elapsed": 0.0031643258, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: COMMIT in 0.003 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.434320Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "elementary_demo", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"elementary_demo.public\", this is inefficient", "name": "CacheMiss", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.480295Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.582156Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.583420Z"}}
{"data": {"elapsed": 0.003365621, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: BEGIN in 0.003 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.588228Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.589584Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.590213Z"}}
{"data": {"elapsed": 0.005326891, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: SELECT 51 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.596141Z"}}
{"data": {"database": "elementary_demo", "relations": [{"database": "elementary_demo", "identifier": "metadata", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_exposures", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_seeds", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "elementary_test_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_result_rows", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_dataset", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_invocations", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_sources", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_columns", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_payments", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_signups", "schema": "public"}, {"database": "elementary_demo", "identifier": "monitors_runs", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "returned_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_practice", "schema": "public"}, {"database": "elementary_demo", "identifier": "job_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4schema", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_volume", "schema": "public"}, {"database": "elementary_demo", "identifier": "model_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "While listing relations in database=elementary_demo, schema=public, found: metadata, dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_result_rows, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metrics_anomaly_score, stg_payments, customers, snapshot_run_results, alerts_dbt_tests, alerts_dbt_models, stg_signups, monitors_runs, alerts_schema_changes, alerts_dbt_source_freshness, test4_column_anomaly, returned_orders, stg_customers, test_practice, job_run_results, dbt_artifacts_hashes, test4schema, test4_volume_anomaly, stg_orders, test_volume, model_run_results, alerts_anomaly_detection, orders, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.608295Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.639122Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.639863Z"}}
{"data": {"elapsed": 0.011219535, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: SELECT 20 in 0.011 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.651825Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.666635Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.668183Z"}}
{"data": {"elapsed": 0.008063502, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: SELECT 20 in 0.008 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.677353Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.686546Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.687663Z"}}
{"data": {"elapsed": 0.004343311, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: SELECT 20 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.692890Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.702164Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  depends_on_nodes,\n                  \n                    depends_on_columns\n                  \n\n                from \"elementary_demo\".\"public\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  depends_on_nodes,\n                  \n                    depends_on_columns\n                  \n\n                from \"elementary_demo\".\"public\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.702944Z"}}
{"data": {"elapsed": 0.002983884, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "SQL status: SELECT 0 in 0.003 seconds", "name": "SQLQueryStatus", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.706686Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.715045Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.715921Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.719258Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.6644304, "process_in_blocks": "0", "process_kernel_time": 0.409725, "process_mem_max_rss": "124903424", "process_out_blocks": "0", "process_user_time": 2.931479}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.6644304, \"process_user_time\": 2.931479, \"process_kernel_time\": 0.409725, \"process_mem_max_rss\": \"124903424\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.754740Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:12.756234Z", "elapsed": 1.6663674, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:12.756234 after 1.67 seconds", "name": "CommandCompleted", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.756441Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.757399Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119d32350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ae6b700>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4f5510>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119d32350>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ae6b700>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4f5510>]}", "name": "SendingEvent", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.758104Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "ea196036-72a8-4268-868b-b8e073aa42b7", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47006, "thread": "MainThread", "ts": "2024-08-19T01:29:12.759045Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a692410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bdc5870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bdc5f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a692410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bdc5870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bdc5f30>]}", "name": "SendingEvent", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:15.914721Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:15.921996Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_singular_tests\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'fail_fast': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'introspect': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_singular_tests\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:15.922870Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a7237f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a7237f0>]}", "name": "SendingEvent", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.129139Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c24fe50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c24fe50>]}", "name": "SendingEvent", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.189680Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.190844Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.224458Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.579021Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.579687Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120f78ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120f78ee0>]}", "name": "SendingEvent", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.719324Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120ee35b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120ee35b0>]}", "name": "SendingEvent", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.937483Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.938258Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120f31270>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '4119cac3-89b3-44d6-9c6a-8d5f5cd035f8', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120f31270>]}", "name": "SendingEvent", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.938817Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.939534Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.940071Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.940583Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.941079Z"}}
{"data": {"elapsed": 0.03271335, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "SQL status: BEGIN in 0.033 seconds", "name": "SQLQueryStatus", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.973883Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.974634Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.975163Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.975767Z"}}
{"data": {"elapsed": 0.00083093403, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:16.977163Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.075420Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n          unique_id,\n          name,\n          original_path,\n          package_name,\n          tags\n        from \"elementary_demo\".\"public\".\"dbt_tests\"\n        where type = 'singular'\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n          unique_id,\n          name,\n          original_path,\n          package_name,\n          tags\n        from \"elementary_demo\".\"public\".\"dbt_tests\"\n        where type = 'singular'\n    \n  ", "name": "SQLQuery", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.076117Z"}}
{"data": {"elapsed": 0.005467288, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "SQL status: SELECT 1 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.082211Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"name\": \"test4_dbt_test\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"tags\": \"[]\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "info", "msg": "Elementary: [{\"unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"name\": \"test4_dbt_test\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"tags\": \"[]\"}]", "name": "JinjaLogInfo", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.092022Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.092732Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.271128, "process_in_blocks": "0", "process_kernel_time": 0.406711, "process_mem_max_rss": "123838464", "process_out_blocks": "0", "process_user_time": 2.741006}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.271128, \"process_user_time\": 2.741006, \"process_kernel_time\": 0.406711, \"process_mem_max_rss\": \"123838464\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.106046Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:17.106839Z", "elapsed": 1.2720954, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:17.106839 after 1.27 seconds", "name": "CommandCompleted", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.106962Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.107754Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a692410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b7c7ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c24d7b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a692410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b7c7ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c24d7b0>]}", "name": "SendingEvent", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.108344Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "4119cac3-89b3-44d6-9c6a-8d5f5cd035f8", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47012, "thread": "MainThread", "ts": "2024-08-19T01:29:17.108952Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117d15840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117d15f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117d15840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117d15f00>]}", "name": "SendingEvent", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:20.351926Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:20.361506Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:20.362661Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116672320>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116672320>]}", "name": "SendingEvent", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:20.731550Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117736740>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117736740>]}", "name": "SendingEvent", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:20.862366Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:20.863702Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:20.902918Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.304314Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.305037Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118e3ceb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118e3ceb0>]}", "name": "SendingEvent", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.462590Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118dac880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118dac880>]}", "name": "SendingEvent", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.702368Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.703266Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118df5f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '2a0f0076-0ba4-4078-89ce-ff176aa546c3', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118df5f30>]}", "name": "SendingEvent", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.704148Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.705448Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.706222Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.707070Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.707763Z"}}
{"data": {"elapsed": 0.043876704, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "SQL status: BEGIN in 0.044 seconds", "name": "SQLQueryStatus", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.751682Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.752820Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.753858Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.754686Z"}}
{"data": {"elapsed": 0.0015677591, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "SQL status: COMMIT in 0.002 seconds", "name": "SQLQueryStatus", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.757051Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.927411Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"elementary_demo\".\"public\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"elementary_demo\".\"public\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.928164Z"}}
{"data": {"elapsed": 0.007047088, "status": "SELECT 36"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "SQL status: SELECT 36 in 0.007 seconds", "name": "SQLQueryStatus", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.935959Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    age\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    age\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"221ed21b-e787-4a4e-8f80-77edb9e8ec22\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 03:51:01\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"58e8d583-7104-4bac-9c09-7933cbfcb185\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    age\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-18 08:21:17\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"elementary_demo\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-19 01:28:05\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"elementary_demo\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    age\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 01:28:05\"}]", "name": "JinjaLogInfo", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.955050Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.957638Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.7400606, "process_in_blocks": "0", "process_kernel_time": 0.474359, "process_mem_max_rss": "124358656", "process_out_blocks": "0", "process_user_time": 3.102811}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.7400606, \"process_user_time\": 3.102811, \"process_kernel_time\": 0.474359, \"process_mem_max_rss\": \"124358656\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.970417Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:21.971313Z", "elapsed": 1.7412205, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:21.971313 after 1.74 seconds", "name": "CommandCompleted", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.971445Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.972107Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1181a4730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118df5c30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1181a4730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118df5c30>]}", "name": "SendingEvent", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.972682Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "2a0f0076-0ba4-4078-89ce-ff176aa546c3", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47017, "thread": "MainThread", "ts": "2024-08-19T01:29:21.973273Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113c923e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115389840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115389f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113c923e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115389840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115389f00>]}", "name": "SendingEvent", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:26.376297Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:26.384544Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'version_check': 'True', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:26.385538Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113d26320>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113d26320>]}", "name": "SendingEvent", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:26.626067Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114df6740>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114df6740>]}", "name": "SendingEvent", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:26.698689Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:26.699945Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:26.733379Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.089340Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.090306Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164f4eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164f4eb0>]}", "name": "SendingEvent", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.241984Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11645c880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11645c880>]}", "name": "SendingEvent", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.473267Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.474082Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164adf30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '10a11eef-6121-45c1-a3e4-d0f89dc06dbd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164adf30>]}", "name": "SendingEvent", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.474625Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.475511Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.476305Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.476837Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.477343Z"}}
{"data": {"elapsed": 0.031361014, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "SQL status: BEGIN in 0.031 seconds", "name": "SQLQueryStatus", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.508789Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.509516Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.510057Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.510582Z"}}
{"data": {"elapsed": 0.000993288, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.512108Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "elementary_demo", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"elementary_demo.public\", this is inefficient", "name": "CacheMiss", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.531806Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.611250Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.611938Z"}}
{"data": {"elapsed": 0.001655826, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.614187Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.615209Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.616010Z"}}
{"data": {"elapsed": 0.004289668, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "SQL status: SELECT 51 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.620925Z"}}
{"data": {"database": "elementary_demo", "relations": [{"database": "elementary_demo", "identifier": "metadata", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_exposures", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_seeds", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "elementary_test_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_result_rows", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_dataset", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_invocations", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_sources", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_columns", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_payments", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_signups", "schema": "public"}, {"database": "elementary_demo", "identifier": "monitors_runs", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "returned_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_practice", "schema": "public"}, {"database": "elementary_demo", "identifier": "job_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4schema", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_volume", "schema": "public"}, {"database": "elementary_demo", "identifier": "model_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "While listing relations in database=elementary_demo, schema=public, found: metadata, dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_result_rows, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metrics_anomaly_score, stg_payments, customers, snapshot_run_results, alerts_dbt_tests, alerts_dbt_models, stg_signups, monitors_runs, alerts_schema_changes, alerts_dbt_source_freshness, test4_column_anomaly, returned_orders, stg_customers, test_practice, job_run_results, dbt_artifacts_hashes, test4schema, test4_volume_anomaly, stg_orders, test_volume, model_run_results, alerts_anomaly_detection, orders, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.632483Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.640304Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"elementary_demo\".\"public\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"elementary_demo\".\"public\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.641156Z"}}
{"data": {"elapsed": 0.002284679, "status": "SELECT 7"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "SQL status: SELECT 7 in 0.002 seconds", "name": "SQLQueryStatus", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.644083Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"model.elementary_tutorial.customers\", \"column_tests\": 1, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"column_tests\": 2, \"table_tests\": 0}, {\"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"column_tests\": 0, \"table_tests\": 1}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"model.elementary_tutorial.customers\", \"column_tests\": 1, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"column_tests\": 2, \"table_tests\": 0}, {\"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"column_tests\": 0, \"table_tests\": 1}]", "name": "JinjaLogInfo", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.652828Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.653615Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.655702Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3771288, "process_in_blocks": "0", "process_kernel_time": 0.418958, "process_mem_max_rss": "123928576", "process_out_blocks": "0", "process_user_time": 2.850839}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3771288, \"process_user_time\": 2.850839, \"process_kernel_time\": 0.418958, \"process_mem_max_rss\": \"123928576\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.666268Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:27.667033Z", "elapsed": 1.3780681, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:27.667033 after 1.38 seconds", "name": "CommandCompleted", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.667163Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.667768Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113c923e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11585c730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164adc30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113c923e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11585c730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164adc30>]}", "name": "SendingEvent", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.668340Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "10a11eef-6121-45c1-a3e4-d0f89dc06dbd", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47021, "thread": "MainThread", "ts": "2024-08-19T01:29:27.668916Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1124be3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11dea5840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11dea5f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1124be3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11dea5840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11dea5f00>]}", "name": "SendingEvent", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:31.535984Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:31.543041Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'debug': 'False', 'version_check': 'True', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'fail_fast': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:31.543822Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11254a320>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11254a320>]}", "name": "SendingEvent", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:31.766546Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d8d2740>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d8d2740>]}", "name": "SendingEvent", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:31.832681Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:31.833932Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:31.866548Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.224140Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.224840Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef74eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef74eb0>]}", "name": "SendingEvent", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.384248Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11eee4880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11eee4880>]}", "name": "SendingEvent", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.617258Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.618054Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef2df30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '325fff4e-608a-462d-aece-350b1dc43514', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef2df30>]}", "name": "SendingEvent", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.618597Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.619323Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.619874Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.620465Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.620991Z"}}
{"data": {"elapsed": 0.03533012, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "SQL status: BEGIN in 0.035 seconds", "name": "SQLQueryStatus", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.656386Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.657104Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.657633Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.658148Z"}}
{"data": {"elapsed": 0.001062145, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.659731Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "elementary_demo", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"elementary_demo.public\", this is inefficient", "name": "CacheMiss", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.683523Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.779946Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.780822Z"}}
{"data": {"elapsed": 0.0018542849, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.783878Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.784890Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'elementary_demo' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'elementary_demo' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.785594Z"}}
{"data": {"elapsed": 0.005530103, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "SQL status: SELECT 51 in 0.006 seconds", "name": "SQLQueryStatus", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.791758Z"}}
{"data": {"database": "elementary_demo", "relations": [{"database": "elementary_demo", "identifier": "metadata", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_exposures", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_seeds", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "elementary_test_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_result_rows", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_dataset", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_invocations", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_sources", "schema": "public"}, {"database": "elementary_demo", "identifier": "payments_validation", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_columns", "schema": "public"}, {"database": "elementary_demo", "identifier": "signups_training", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_payments", "schema": "public"}, {"database": "elementary_demo", "identifier": "customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_models", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_signups", "schema": "public"}, {"database": "elementary_demo", "identifier": "monitors_runs", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "returned_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_customers", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_practice", "schema": "public"}, {"database": "elementary_demo", "identifier": "job_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4schema", "schema": "public"}, {"database": "elementary_demo", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "elementary_demo", "identifier": "stg_orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "test_volume", "schema": "public"}, {"database": "elementary_demo", "identifier": "model_run_results", "schema": "public"}, {"database": "elementary_demo", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "elementary_demo", "identifier": "orders", "schema": "public"}, {"database": "elementary_demo", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "While listing relations in database=elementary_demo, schema=public, found: metadata, dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_result_rows, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metrics_anomaly_score, stg_payments, customers, snapshot_run_results, alerts_dbt_tests, alerts_dbt_models, stg_signups, monitors_runs, alerts_schema_changes, alerts_dbt_source_freshness, test4_column_anomaly, returned_orders, stg_customers, test_practice, job_run_results, dbt_artifacts_hashes, test4schema, test4_volume_anomaly, stg_orders, test_volume, model_run_results, alerts_anomaly_detection, orders, anomaly_threshold_sensitivity", "name": "ListRelations", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.803661Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.812562Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"elementary_demo\".\"public\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"elementary_demo\".\"public\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"elementary_demo\".\"public\".\"dbt_exposures\"\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"elementary_demo\".\"public\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"elementary_demo\".\"public\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"elementary_demo\".\"public\".\"dbt_exposures\"\n    \n  ", "name": "SQLQuery", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.813451Z"}}
{"data": {"elapsed": 0.003464577, "status": "SELECT 12"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "SQL status: SELECT 12 in 0.003 seconds", "name": "SQLQueryStatus", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.818Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.orders\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_volume\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_customers\\\", \\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\", \\\"model.elementary_tutorial.stg_signups\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_practice\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_training\\\", \\\"seed.elementary_tutorial.customers_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_validation\\\", \\\"seed.elementary_tutorial.test_training\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.payments_training\\\", \\\"seed.elementary_tutorial.payments_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.orders_training\\\", \\\"seed.elementary_tutorial.orders_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.signups_training\\\", \\\"seed.elementary_tutorial.signups_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.test_dataset\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test4_column_anomaly\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.orders\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_volume\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_customers\\\", \\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\", \\\"model.elementary_tutorial.stg_signups\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_practice\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_training\\\", \\\"seed.elementary_tutorial.customers_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_validation\\\", \\\"seed.elementary_tutorial.test_training\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.payments_training\\\", \\\"seed.elementary_tutorial.payments_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.orders_training\\\", \\\"seed.elementary_tutorial.orders_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.signups_training\\\", \\\"seed.elementary_tutorial.signups_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.test_dataset\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test4_column_anomaly\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}]", "name": "JinjaLogInfo", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.827309Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.828252Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.830053Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.387376, "process_in_blocks": "0", "process_kernel_time": 0.400685, "process_mem_max_rss": "124215296", "process_out_blocks": "0", "process_user_time": 2.734421}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.387376, \"process_user_time\": 2.734421, \"process_kernel_time\": 0.400685, \"process_mem_max_rss\": \"124215296\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.840962Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:32.841707Z", "elapsed": 1.3882918, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:32.841707 after 1.39 seconds", "name": "CommandCompleted", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.841832Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.842425Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1124be3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e2dc730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef2dc30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1124be3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e2dc730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ef2dc30>]}", "name": "SendingEvent", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.842971Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "325fff4e-608a-462d-aece-350b1dc43514", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47027, "thread": "MainThread", "ts": "2024-08-19T01:29:32.843534Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110b6a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114329840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114329f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110b6a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114329840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114329f00>]}", "name": "SendingEvent", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:37.596354Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:37.603718Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:37.604505Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110bf7790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110bf7790>]}", "name": "SendingEvent", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:37.815986Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111ccc520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111ccc520>]}", "name": "SendingEvent", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:37.883266Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:37.884421Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:37.914545Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.243783Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.244451Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115440e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115440e80>]}", "name": "SendingEvent", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.392986Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1153a5600>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1153a5600>]}", "name": "SendingEvent", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.620645Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.621408Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1153f1060>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '582746ab-27d4-4748-b373-a477dde070d5', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1153f1060>]}", "name": "SendingEvent", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.621939Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.622645Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.623265Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.623768Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.624537Z"}}
{"data": {"elapsed": 0.031085076, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "SQL status: BEGIN in 0.031 seconds", "name": "SQLQueryStatus", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.655621Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.656332Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.656922Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.657463Z"}}
{"data": {"elapsed": 0.00092181796, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.658924Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.762762Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"elementary_demo\".\"public\".\"dbt_run_results\" run_results\n      join \"elementary_demo\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"elementary_demo\".\"public\".\"dbt_run_results\" run_results\n      join \"elementary_demo\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.763486Z"}}
{"data": {"elapsed": 0.004845339, "status": "SELECT 40"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "SQL status: SELECT 40 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.769069Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\"}]", "name": "JinjaLogInfo", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.780235Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.782134Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.288735, "process_in_blocks": "0", "process_kernel_time": 0.381292, "process_mem_max_rss": "123949056", "process_out_blocks": "0", "process_user_time": 2.693061}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.288735, \"process_user_time\": 2.693061, \"process_kernel_time\": 0.381292, \"process_mem_max_rss\": \"123949056\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.793300Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:38.794051Z", "elapsed": 1.2896512, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:38.794051 after 1.29 seconds", "name": "CommandCompleted", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.794175Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.794769Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110b6a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1147a9ae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1153f1c30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x110b6a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1147a9ae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1153f1c30>]}", "name": "SendingEvent", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.795320Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "582746ab-27d4-4748-b373-a477dde070d5", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47031, "thread": "MainThread", "ts": "2024-08-19T01:29:38.795887Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4a23b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db95840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db95f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4a23b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db95840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db95f00>]}", "name": "SendingEvent", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:41.888356Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:41.895363Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:41.896155Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c533790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c533790>]}", "name": "SendingEvent", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.102025Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d648520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d648520>]}", "name": "SendingEvent", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.168991Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.170896Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.205582Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.547377Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.548025Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ed34e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ed34e80>]}", "name": "SendingEvent", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.681173Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11eca1600>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11eca1600>]}", "name": "SendingEvent", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.898661Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.899654Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11eced060>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'bcdde4af-5f7d-4cd8-bf8f-d1952537134e', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11eced060>]}", "name": "SendingEvent", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.900301Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.901104Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.901942Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.902715Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.903447Z"}}
{"data": {"elapsed": 0.032608643, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "SQL status: BEGIN in 0.033 seconds", "name": "SQLQueryStatus", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.936086Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.936914Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.937467Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.937989Z"}}
{"data": {"elapsed": 0.0010545701, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:42.939649Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.053340Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.054006Z"}}
{"data": {"elapsed": 0.002040835, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.056682Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.057382Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"elementary_demo\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.058493Z"}}
{"data": {"elapsed": 0.009440706, "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "SQL status: SELECT 35 in 0.009 seconds", "name": "SQLQueryStatus", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.068697Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.080609Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"elementary_demo\".\"public\".\"dbt_run_results\" run_results\n      join \"elementary_demo\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"elementary_demo\".\"public\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"elementary_demo\".\"public\".\"dbt_run_results\" run_results\n      join \"elementary_demo\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"elementary_demo\".\"public\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.081290Z"}}
{"data": {"elapsed": 0.004444373, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "SQL status: SELECT 1 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.086371Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": null, \"job_name\": null, \"job_id\": null, \"orchestrator\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"4ff85ef3-d80c-4c2a-962a-090a84e0722a\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": null, \"job_name\": null, \"job_id\": null, \"orchestrator\": null}]", "name": "JinjaLogInfo", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.094001Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.094720Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.096484Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.2971956, "process_in_blocks": "0", "process_kernel_time": 0.392151, "process_mem_max_rss": "124268544", "process_out_blocks": "0", "process_user_time": 2.739639}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.2971956, \"process_user_time\": 2.739639, \"process_kernel_time\": 0.392151, \"process_mem_max_rss\": \"124268544\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.107434Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T01:29:43.108190Z", "elapsed": 1.2981294, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 09:29:43.108190 after 1.30 seconds", "name": "CommandCompleted", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.108319Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.108928Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4a23b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e0bdae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ecedc30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c4a23b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e0bdae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ecedc30>]}", "name": "SendingEvent", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.109484Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "bcdde4af-5f7d-4cd8-bf8f-d1952537134e", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 47035, "thread": "MainThread", "ts": "2024-08-19T01:29:43.110052Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118f7a410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a69d870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a69df30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118f7a410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a69d870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a69df30>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:11.690263Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:11.700086Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:11.700934Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11900b7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11900b7f0>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:11.932398Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a7d3e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11a7d3e50>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:11.999688Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:12.001516Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:12.033871Z"}}
{"data": {"reason": "profile has changed"}, "info": {"category": "", "code": "I024", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "info", "msg": "Unable to do partial parsing because profile has changed", "name": "UnableToPartialParse", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:12.222887Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'partial_parser', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119ae6fb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'partial_parser', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119ae6fb0>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:12.223636Z"}}
{"data": {"deprecated_path": "tests", "exp_path": "data_tests"}, "info": {"category": "", "code": "D012", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "warn", "msg": "[\u001b[33mWARNING\u001b[0m]: Deprecated functionality\nThe `tests` config has been renamed to `data_tests`. Please see\nhttps://docs.getdbt.com/docs/build/data-tests#new-data_tests-syntax for more\ninformation.", "name": "TestsConfigDeprecation", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:17.407970Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'deprecation', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bbeec80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'deprecation', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'property_': 'warn', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bbeec80>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:17.408697Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11babf460>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11babf460>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:17.834514Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ba8d870>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ba8d870>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.055214Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.055975Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bad0a90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '71bb91c9-4637-4e40-9974-7be6b1b666ac', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bad0a90>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.056508Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.057210Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.057915Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.058437Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.058939Z"}}
{"data": {"elapsed": 0.051594112, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "SQL status: BEGIN in 0.052 seconds", "name": "SQLQueryStatus", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.110598Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.111307Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.111839Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.112356Z"}}
{"data": {"elapsed": 0.0015667861, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "SQL status: COMMIT in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.114493Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.132473Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.218372Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.219208Z"}}
{"data": {"elapsed": 0.0020815409, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.221913Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.222574Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.223100Z"}}
{"data": {"elapsed": 0.005946028, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "SQL status: SELECT 51 in 0.006 seconds", "name": "SQLQueryStatus", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.229648Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: customers_training, signups_validation, dbt_exposures, dbt_seeds, elementary_test_results, customers_validation, test_dataset, dbt_invocations, dbt_snapshots, orders_training, test_training, orders_validation, test_validation, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, payments_training, data_monitoring_metrics, dbt_models, dbt_sources, test_result_rows, payments_validation, signups_training, dbt_columns, dbt_run_results, dbt_tests, metadata, stg_payments, customers, stg_signups, returned_orders, test4_column_anomaly, stg_customers, test_practice, test4_volume_anomaly, test4schema, orders, stg_orders, test_volume, alerts_anomaly_detection, alerts_dbt_tests, metrics_anomaly_score, monitors_runs, alerts_schema_changes, job_run_results, model_run_results, snapshot_run_results, alerts_dbt_source_freshness, dbt_artifacts_hashes, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.241180Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.248445Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"demo_0819\".\"public\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"demo_0819\".\"public\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.249110Z"}}
{"data": {"elapsed": 0.001997911, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "SQL status: SELECT 1 in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.251837Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"job_id\": null, \"job_name\": null, \"job_run_id\": null, \"run_started_at\": \"2024-08-19 02:20:54\", \"run_completed_at\": \"2024-08-19 02:21:00\", \"generated_at\": \"2024-08-19 02:21:00\", \"created_at\": \"2024-08-19T02:21:00.772022\", \"command\": \"test\", \"dbt_version\": \"1.8.3\", \"elementary_version\": \"0.15.2\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"dev\", \"target_database\": \"demo_0819\", \"target_schema\": \"public\", \"target_profile_name\": \"elementary\", \"threads\": 1, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": null, \"project_name\": \"elementary_tutorial\", \"env\": null, \"env_id\": null, \"cause_category\": null, \"cause\": null, \"pull_request_id\": null, \"git_sha\": null, \"orchestrator\": null, \"dbt_user\": null, \"job_url\": null, \"job_run_url\": null, \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"dbt_user\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"job_id\": null, \"job_name\": null, \"job_run_id\": null, \"run_started_at\": \"2024-08-19 02:20:54\", \"run_completed_at\": \"2024-08-19 02:21:00\", \"generated_at\": \"2024-08-19 02:21:00\", \"created_at\": \"2024-08-19T02:21:00.772022\", \"command\": \"test\", \"dbt_version\": \"1.8.3\", \"elementary_version\": \"0.15.2\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"dev\", \"target_database\": \"demo_0819\", \"target_schema\": \"public\", \"target_profile_name\": \"elementary\", \"threads\": 1, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": null, \"project_name\": \"elementary_tutorial\", \"env\": null, \"env_id\": null, \"cause_category\": null, \"cause\": null, \"pull_request_id\": null, \"git_sha\": null, \"orchestrator\": null, \"dbt_user\": null, \"job_url\": null, \"job_run_url\": null, \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"dbt_user\\\"}\"}]", "name": "JinjaLogInfo", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.260348Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.261117Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.262915Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 6.671182, "process_in_blocks": "0", "process_kernel_time": 0.584837, "process_mem_max_rss": "133238784", "process_out_blocks": "0", "process_user_time": 8.400912}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 6.671182, \"process_user_time\": 8.400912, \"process_kernel_time\": 0.584837, \"process_mem_max_rss\": \"133238784\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.272375Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:21:18.273123Z", "elapsed": 6.672102, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:21:18.273123 after 6.67 seconds", "name": "CommandCompleted", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.273248Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.273847Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118f7a410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119ae4940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11900b7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118f7a410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x119ae4940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11900b7f0>]}", "name": "SendingEvent", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.274400Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "71bb91c9-4637-4e40-9974-7be6b1b666ac", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49087, "thread": "MainThread", "ts": "2024-08-19T02:21:18.274960Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db5e410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121349870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121349f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db5e410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121349870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121349f30>]}", "name": "SendingEvent", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.269336Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.276154Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'version_check': 'True', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.277633Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11dbeb7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11dbeb7f0>]}", "name": "SendingEvent", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.498633Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12180fe50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12180fe50>]}", "name": "SendingEvent", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.569822Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.571111Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.602676Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.955832Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:21.956517Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1224b0ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1224b0ee0>]}", "name": "SendingEvent", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.107184Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12241b5b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12241b5b0>]}", "name": "SendingEvent", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.333133Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.333936Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x122465270>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '36b35bf7-0b87-46b9-aebb-ba18a334a781', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x122465270>]}", "name": "SendingEvent", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.334522Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.335277Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.335843Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.336356Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.337064Z"}}
{"data": {"elapsed": 0.039926726, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "SQL status: BEGIN in 0.040 seconds", "name": "SQLQueryStatus", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.377141Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.378418Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.379405Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.379969Z"}}
{"data": {"elapsed": 0.001070794, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.381655Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"localhost\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "info", "msg": "Elementary: [\"postgres\", \"localhost\"]", "name": "JinjaLogInfo", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.401925Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.402974Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.2238694, "process_in_blocks": "0", "process_kernel_time": 0.353078, "process_mem_max_rss": "119312384", "process_out_blocks": "0", "process_user_time": 2.674958}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.2238694, \"process_user_time\": 2.674958, \"process_kernel_time\": 0.353078, \"process_mem_max_rss\": \"119312384\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.415008Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:21:22.415768Z", "elapsed": 1.2248112, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:21:22.415768 after 1.22 seconds", "name": "CommandCompleted", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.415950Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.416595Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db5e410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120d87ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12180d7b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11db5e410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120d87ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12180d7b0>]}", "name": "SendingEvent", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.417207Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "36b35bf7-0b87-46b9-aebb-ba18a334a781", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49093, "thread": "MainThread", "ts": "2024-08-19T02:21:22.417835Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113b3a380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1152697e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115269ea0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113b3a380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1152697e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115269ea0>]}", "name": "SendingEvent", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:25.514413Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:25.521610Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'debug': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'introspect': 'True', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:25.522416Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113bcb0a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113bcb0a0>]}", "name": "SendingEvent", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:25.737529Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114ce04f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114ce04f0>]}", "name": "SendingEvent", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:25.803373Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:25.804559Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:25.836105Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.171078Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.171742Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116398e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116398e50>]}", "name": "SendingEvent", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.304158Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1163015a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1163015a0>]}", "name": "SendingEvent", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.521171Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.522022Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116351120>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116351120>]}", "name": "SendingEvent", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.522566Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.523270Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.523815Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.524397Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.524897Z"}}
{"data": {"elapsed": 0.030260665, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "SQL status: BEGIN in 0.030 seconds", "name": "SQLQueryStatus", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.555217Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.555925Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.556463Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.556983Z"}}
{"data": {"elapsed": 0.000871183, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.558390Z"}}
{"data": {"msg": "Elementary: \"demo_0819.public\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "info", "msg": "Elementary: \"demo_0819.public\"", "name": "JinjaLogInfo", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.575888Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.576603Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.1517757, "process_in_blocks": "0", "process_kernel_time": 0.340584, "process_mem_max_rss": "120041472", "process_out_blocks": "0", "process_user_time": 2.625759}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.1517757, \"process_user_time\": 2.625759, \"process_kernel_time\": 0.340584, \"process_mem_max_rss\": \"120041472\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.588861Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:21:26.589713Z", "elapsed": 1.1527983, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:21:26.589713 after 1.15 seconds", "name": "CommandCompleted", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.589840Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.590426Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113b3a380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115700400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116351180>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113b3a380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115700400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116351180>]}", "name": "SendingEvent", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.590980Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "b5aca3c7-f4d7-40b0-9fc2-48ba42e32ffd", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49097, "thread": "MainThread", "ts": "2024-08-19T02:21:26.591529Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1123463b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bd6b940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bd6b280>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1123463b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bd6b940>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bd6b280>]}", "name": "SendingEvent", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:29.619086Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:29.625928Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:29.626682Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1123db790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1123db790>]}", "name": "SendingEvent", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:29.849508Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b7e0520>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b7e0520>]}", "name": "SendingEvent", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:29.917357Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:29.918527Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:29.948691Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.278053Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.301676Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce90e80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce90e80>]}", "name": "SendingEvent", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.449252Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce01600>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce01600>]}", "name": "SendingEvent", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.665344Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.666215Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce4d060>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '6ba57e0d-3d36-4684-a8da-45c54e137563', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce4d060>]}", "name": "SendingEvent", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.666837Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.667613Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.668180Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.668702Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.669235Z"}}
{"data": {"elapsed": 0.032360405, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "SQL status: BEGIN in 0.032 seconds", "name": "SQLQueryStatus", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.701654Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.702393Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.702927Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.703439Z"}}
{"data": {"elapsed": 0.00094998, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.704925Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.846602Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"demo_0819\".\"public\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_run_results as (\n        select * from \"demo_0819\".\"public\".\"dbt_run_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(execute_completed_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"demo_0819\".\"public\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"demo_0819\".\"public\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"demo_0819\".\"public\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.original_path,\n        dbt_tests.meta,\n        dbt_tests.package_name,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at,\n        dbt_run_results.execution_time as execution_time\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n    left join dbt_run_results on elementary_test_results.test_execution_id = dbt_run_results.model_execution_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            original_path,\n            package_name,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            execution_time,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"demo_0819\".\"public\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_run_results as (\n        select * from \"demo_0819\".\"public\".\"dbt_run_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(execute_completed_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"demo_0819\".\"public\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"demo_0819\".\"public\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"demo_0819\".\"public\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.original_path,\n        dbt_tests.meta,\n        dbt_tests.package_name,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at,\n        dbt_run_results.execution_time as execution_time\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n    left join dbt_run_results on elementary_test_results.test_execution_id = dbt_run_results.model_execution_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            original_path,\n            package_name,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            execution_time,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.847565Z"}}
{"data": {"elapsed": 0.010111056, "status": "SELECT 18"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "SQL status: SELECT 18 in 0.010 seconds", "name": "SQLQueryStatus", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.858577Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.867931Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"demo_0819\".\"public\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"demo_0819\".\"public\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.868627Z"}}
{"data": {"elapsed": 0.005223855, "status": "SELECT 80"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "SQL status: SELECT 80 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.874617Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819021745888153\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022057156017\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819021746308555\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819021746551030\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819021746811117\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022058084574\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": {\"headers\": [{\"id\": \"anomalous_value_timestamp\", \"display_name\": \"timestamp\", \"type\": \"date\"}, {\"id\": \"anomalous_value_generic\", \"display_name\": \"generic\", \"type\": \"int\"}, {\"id\": \"anomalous_value_average_generic\", \"display_name\": \"average generic\", \"type\": \"int\"}], \"test_rows_sample\": []}}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819021747103128\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022058374991\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"2b8410462117cedc6038024b2b41d6a9\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ede8997e3958d08762db9b0255e9ba3\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"c3491814ee55d38b775db57f6e0efc2a\", \"metric_id\": \"bf5e28a94431dea275571fed6c5bfecd\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"e09cee9c66f0e5d30142121817fd1179\", \"metric_id\": \"121d2b49eaa2513e6933ef2fe32a6f47\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"54221a63a6213e1c874e02d9954574b7\", \"metric_id\": \"7802f38c4ec801e284a71c0ad6191026\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"e11216e271836bab4b07a379fe5ddd7a\", \"metric_id\": \"38aa31cc443dbc0be8d4103644253bab\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"457ad5a1886869f30fc602085d452f7e\", \"metric_id\": \"3498df239b5cd13f8e4b43501c835010\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"ecf01a7a1508128554fcb5ed7824c7df\", \"metric_id\": \"3a103f247254724e645df3463faf3e55\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"481a03274971acb8e93e6b35dcfab3d0\", \"metric_id\": \"134d4009d5805e1ce9ce24df7f062303\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"259bcc743588744d6236be33a14f76fa\", \"metric_id\": \"1e0eacf9e5039e7261548e4d18b04228\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"804eebce44c6027c7d5a574149088578\", \"metric_id\": \"2b39525e4dc69e056af5864db9bb286a\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"e7b0b450af45bd68a6be48e0fc9aed7f\", \"metric_id\": \"590d8770e38c3f1a5694a8b80c248070\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"8715f7f5e0fc787baca3cfee5814b77f\", \"metric_id\": \"86b486058658ba99b9528de9af6e9af7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"e02282f819c44b493e5c2f516ee43c29\", \"metric_id\": \"7c0b7d47eceaa9381bd04f80eb2a2f0a\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"3ede8997e3958d08762db9b0255e9ba3\", \"metric_id\": \"7c00e686f72865bf2a04f7489fa385c5\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"985bca06bd242cc45745fe9330cbe9d1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4d8a4a73ebdcd8b3aaeb7e20df4dd55f\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"e2200953e0dd001e8fee5b68cfeeed4d\", \"metric_id\": \"48996974c39b647abb0971b36df2cb11\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"b62ea96f4572e5935795b0d6ffbbe252\", \"metric_id\": \"d290e8b6f9ca876ef105c04b5f561984\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"a29e91862ad71a45d1974238fd1cb555\", \"metric_id\": \"09ce18b53e0f7e67cac0ffc6f36d7f93\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"bb2e043ae5533044b36cefba50397c73\", \"metric_id\": \"3b8b88e1121e5bd50647b959d014c0e3\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"ecca38d6fa763affa59e67f6b303591d\", \"metric_id\": \"04db7b311323b3843d0c5d46fb40ad6e\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"6a1e78bd8c98e59122c5d2071a3bc06f\", \"metric_id\": \"622b1a721beee3d1bcefd8ea8ee213eb\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"b2fcf6584579479453b14aae57499025\", \"metric_id\": \"27f8fa5835a5fcb6448ba1dcb046df89\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"a560164aa4bea0838e062965553dbe0e\", \"metric_id\": \"1a3a427497d64fa03d19f5c609dac3d2\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"8220190e57e0175b7986979c65f97420\", \"metric_id\": \"e95fe5d7b0bd4ca5b2f6f886a4b075ae\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"c0e107bd347914ea9501aa0a59c54192\", \"metric_id\": \"514e5650529fc063197040313587d7f0\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"4269307471420f490cdd87adeb61975e\", \"metric_id\": \"e92235b400b2159c2d22f8bd79462c0e\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"84ebccbd097f6ed7b58ca6ee90617d8b\", \"metric_id\": \"ffb9dc048a2831ae5b1c3d42570f471b\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"4d8a4a73ebdcd8b3aaeb7e20df4dd55f\", \"metric_id\": \"c5c02803852704d321e1044f687d2ee3\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"baf6d8d166b6b39224898cbf11e3d015\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"df8651a0f0094a7eb6ee16410e0956e9\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"8f0b1ceb1d2d0a55903c4e8ea5429a07\", \"metric_id\": \"96010dc87af5fb92b4266759289b7a08\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"8c0aab385bcd5840a1419998ff0f37b5\", \"metric_id\": \"153070c574d8a1753a1100c60abb5b81\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"c9610ddbd275ffa8957cd688817c0efe\", \"metric_id\": \"d8c977d0b04af08ef5b6bfd853aff6c7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"a80e3acfd5d84fd8b5f0c6607f906fe4\", \"metric_id\": \"4f193cdacbacd952522a8a05097a85e4\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"79f9c23e27d901e84172f372d17e38b1\", \"metric_id\": \"cb386952cea100d725e447584231af12\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"79b08156fd8259ab5bf53cb6e58e6a48\", \"metric_id\": \"760abbe4eb8270612c1822aeeefca322\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"095923a8f3d38a9f445c96d783f2eb28\", \"metric_id\": \"16af441d0fd2f8306d4577f6849de834\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"49859ca3b1dd16c7979b1e4a45b753a7\", \"metric_id\": \"5a0d0d5635cd89445b1a3ea5851c9143\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"dba1d1da5855dbb41a1118bdb2ade9bf\", \"metric_id\": \"366be3bd6dc037a170a9cbabba9357cd\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"3702a3b36a45987b865fc2d6b6ce763e\", \"metric_id\": \"a76f476469394841f226f4e2fdde81cd\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"ad9d07514c1de5c7a2a2fd05252356c2\", \"metric_id\": \"8d800a4affc1b046917db3d6c6bf3d8b\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"8675b96b6c76c05e89db17a184231c5e\", \"metric_id\": \"316e5ac6375c270fb112950627ad998c\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"df8651a0f0094a7eb6ee16410e0956e9\", \"metric_id\": \"4456017a1fb4fcd641411ce89c3ddab1\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 1, \"result_rows\": null, \"sample_data\": [{\"actual_count\": 6, \"expected_count\": 300}]}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "info", "msg": "Elementary: [{\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819021745888153\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022057156017\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819021746308555\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819021746551030\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819021746811117\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022058084574\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": {\"headers\": [{\"id\": \"anomalous_value_timestamp\", \"display_name\": \"timestamp\", \"type\": \"date\"}, {\"id\": \"anomalous_value_generic\", \"display_name\": \"generic\", \"type\": \"int\"}, {\"id\": \"anomalous_value_average_generic\", \"display_name\": \"average generic\", \"type\": \"int\"}], \"test_rows_sample\": []}}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819021747103128\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022058374991\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"2b8410462117cedc6038024b2b41d6a9\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ede8997e3958d08762db9b0255e9ba3\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"c3491814ee55d38b775db57f6e0efc2a\", \"metric_id\": \"bf5e28a94431dea275571fed6c5bfecd\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"e09cee9c66f0e5d30142121817fd1179\", \"metric_id\": \"121d2b49eaa2513e6933ef2fe32a6f47\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"54221a63a6213e1c874e02d9954574b7\", \"metric_id\": \"7802f38c4ec801e284a71c0ad6191026\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"e11216e271836bab4b07a379fe5ddd7a\", \"metric_id\": \"38aa31cc443dbc0be8d4103644253bab\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"457ad5a1886869f30fc602085d452f7e\", \"metric_id\": \"3498df239b5cd13f8e4b43501c835010\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"ecf01a7a1508128554fcb5ed7824c7df\", \"metric_id\": \"3a103f247254724e645df3463faf3e55\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"481a03274971acb8e93e6b35dcfab3d0\", \"metric_id\": \"134d4009d5805e1ce9ce24df7f062303\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"259bcc743588744d6236be33a14f76fa\", \"metric_id\": \"1e0eacf9e5039e7261548e4d18b04228\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"804eebce44c6027c7d5a574149088578\", \"metric_id\": \"2b39525e4dc69e056af5864db9bb286a\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"e7b0b450af45bd68a6be48e0fc9aed7f\", \"metric_id\": \"590d8770e38c3f1a5694a8b80c248070\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"8715f7f5e0fc787baca3cfee5814b77f\", \"metric_id\": \"86b486058658ba99b9528de9af6e9af7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"e02282f819c44b493e5c2f516ee43c29\", \"metric_id\": \"7c0b7d47eceaa9381bd04f80eb2a2f0a\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"3ede8997e3958d08762db9b0255e9ba3\", \"metric_id\": \"7c00e686f72865bf2a04f7489fa385c5\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:20:58.621383\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"985bca06bd242cc45745fe9330cbe9d1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4d8a4a73ebdcd8b3aaeb7e20df4dd55f\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"e2200953e0dd001e8fee5b68cfeeed4d\", \"metric_id\": \"48996974c39b647abb0971b36df2cb11\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"b62ea96f4572e5935795b0d6ffbbe252\", \"metric_id\": \"d290e8b6f9ca876ef105c04b5f561984\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"a29e91862ad71a45d1974238fd1cb555\", \"metric_id\": \"09ce18b53e0f7e67cac0ffc6f36d7f93\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"bb2e043ae5533044b36cefba50397c73\", \"metric_id\": \"3b8b88e1121e5bd50647b959d014c0e3\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"ecca38d6fa763affa59e67f6b303591d\", \"metric_id\": \"04db7b311323b3843d0c5d46fb40ad6e\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"6a1e78bd8c98e59122c5d2071a3bc06f\", \"metric_id\": \"622b1a721beee3d1bcefd8ea8ee213eb\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"b2fcf6584579479453b14aae57499025\", \"metric_id\": \"27f8fa5835a5fcb6448ba1dcb046df89\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"a560164aa4bea0838e062965553dbe0e\", \"metric_id\": \"1a3a427497d64fa03d19f5c609dac3d2\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"8220190e57e0175b7986979c65f97420\", \"metric_id\": \"e95fe5d7b0bd4ca5b2f6f886a4b075ae\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"c0e107bd347914ea9501aa0a59c54192\", \"metric_id\": \"514e5650529fc063197040313587d7f0\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"4269307471420f490cdd87adeb61975e\", \"metric_id\": \"e92235b400b2159c2d22f8bd79462c0e\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"84ebccbd097f6ed7b58ca6ee90617d8b\", \"metric_id\": \"ffb9dc048a2831ae5b1c3d42570f471b\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"4d8a4a73ebdcd8b3aaeb7e20df4dd55f\", \"metric_id\": \"c5c02803852704d321e1044f687d2ee3\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:20:58.895387\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"baf6d8d166b6b39224898cbf11e3d015\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"df8651a0f0094a7eb6ee16410e0956e9\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"8f0b1ceb1d2d0a55903c4e8ea5429a07\", \"metric_id\": \"96010dc87af5fb92b4266759289b7a08\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"8c0aab385bcd5840a1419998ff0f37b5\", \"metric_id\": \"153070c574d8a1753a1100c60abb5b81\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"c9610ddbd275ffa8957cd688817c0efe\", \"metric_id\": \"d8c977d0b04af08ef5b6bfd853aff6c7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"a80e3acfd5d84fd8b5f0c6607f906fe4\", \"metric_id\": \"4f193cdacbacd952522a8a05097a85e4\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"79f9c23e27d901e84172f372d17e38b1\", \"metric_id\": \"cb386952cea100d725e447584231af12\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"79b08156fd8259ab5bf53cb6e58e6a48\", \"metric_id\": \"760abbe4eb8270612c1822aeeefca322\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"095923a8f3d38a9f445c96d783f2eb28\", \"metric_id\": \"16af441d0fd2f8306d4577f6849de834\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"49859ca3b1dd16c7979b1e4a45b753a7\", \"metric_id\": \"5a0d0d5635cd89445b1a3ea5851c9143\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"dba1d1da5855dbb41a1118bdb2ade9bf\", \"metric_id\": \"366be3bd6dc037a170a9cbabba9357cd\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"3702a3b36a45987b865fc2d6b6ce763e\", \"metric_id\": \"a76f476469394841f226f4e2fdde81cd\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"ad9d07514c1de5c7a2a2fd05252356c2\", \"metric_id\": \"8d800a4affc1b046917db3d6c6bf3d8b\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"8675b96b6c76c05e89db17a184231c5e\", \"metric_id\": \"316e5ac6375c270fb112950627ad998c\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"df8651a0f0094a7eb6ee16410e0956e9\", \"metric_id\": \"4456017a1fb4fcd641411ce89c3ddab1\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:20:59.131766\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 1, \"result_rows\": null, \"sample_data\": [{\"actual_count\": 6, \"expected_count\": 300}]}]", "name": "JinjaLogInfo", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.903278Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.913699Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3836478, "process_in_blocks": "0", "process_kernel_time": 0.39143, "process_mem_max_rss": "125669376", "process_out_blocks": "0", "process_user_time": 2.84336}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3836478, \"process_user_time\": 2.84336, \"process_kernel_time\": 0.39143, \"process_mem_max_rss\": \"125669376\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.923445Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:21:30.924200Z", "elapsed": 1.3845794, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:21:30.924200 after 1.38 seconds", "name": "CommandCompleted", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.924327Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.924917Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1123463b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c1f9ae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce4dc30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1123463b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c1f9ae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce4dc30>]}", "name": "SendingEvent", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.925455Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "6ba57e0d-3d36-4684-a8da-45c54e137563", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49105, "thread": "MainThread", "ts": "2024-08-19T02:21:30.926013Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f946440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1210518d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121051f90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f946440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1210518d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121051f90>]}", "name": "SendingEvent", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:34.450143Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:34.457568Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'version_check': 'True', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:34.458352Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f9da380>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f9da380>]}", "name": "SendingEvent", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:34.662419Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120f0f190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120f0f190>]}", "name": "SendingEvent", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:34.737785Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:34.739002Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:34.770593Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.117506Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.118181Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x122210f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x122210f10>]}", "name": "SendingEvent", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.253645Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1221cdb40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1221cdb40>]}", "name": "SendingEvent", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.474533Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.475307Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1221872e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '20059946-80de-4b5f-933b-ffd5b8f9c744', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1221872e0>]}", "name": "SendingEvent", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.475838Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.476544Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.477279Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.477798Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.478295Z"}}
{"data": {"elapsed": 0.03638919, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "SQL status: BEGIN in 0.036 seconds", "name": "SQLQueryStatus", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.514755Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.515513Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.516040Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.516575Z"}}
{"data": {"elapsed": 0.001200042, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.518605Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.640432Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.641112Z"}}
{"data": {"elapsed": 0.001829045, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.643580Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.644323Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.644901Z"}}
{"data": {"elapsed": 0.00934487, "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "SQL status: SELECT 17 in 0.009 seconds", "name": "SQLQueryStatus", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.654937Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.664414Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.665097Z"}}
{"data": {"elapsed": 0.00494753, "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "SQL status: SELECT 22 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.671077Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.711764Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"demo_0819\".\"public\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"demo_0819\".\"public\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"demo_0819\".\"public\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"demo_0819\".\"public\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.713049Z"}}
{"data": {"elapsed": 0.0033155452, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "SQL status: SELECT 0 in 0.003 seconds", "name": "SQLQueryStatus", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.717257Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.724803Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.725520Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.727650Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3669796, "process_in_blocks": "0", "process_kernel_time": 0.401838, "process_mem_max_rss": "124305408", "process_out_blocks": "0", "process_user_time": 2.85738}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3669796, \"process_user_time\": 2.85738, \"process_kernel_time\": 0.401838, \"process_mem_max_rss\": \"124305408\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.737642Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:21:35.738406Z", "elapsed": 1.3679237, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:21:35.738406 after 1.37 seconds", "name": "CommandCompleted", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.738532Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.739128Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f946440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120a93d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12117e800>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f946440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120a93d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12117e800>]}", "name": "SendingEvent", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.739714Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "20059946-80de-4b5f-933b-ffd5b8f9c744", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49112, "thread": "MainThread", "ts": "2024-08-19T02:21:35.740314Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d11a440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e84d8d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e84df90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d11a440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e84d8d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e84df90>]}", "name": "SendingEvent", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.311508Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.318699Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'fail_fast': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'static_parser': 'True', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.319609Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d1ae380>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d1ae380>]}", "name": "SendingEvent", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.533053Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e6cf190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e6cf190>]}", "name": "SendingEvent", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.597376Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.598610Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.628651Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.972924Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:39.973557Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f9d0f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f9d0f10>]}", "name": "SendingEvent", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.106370Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f989b40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f989b40>]}", "name": "SendingEvent", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.327129Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.327994Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f41b2e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'f27877d8-52c0-4708-b911-ffca4074acf9', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f41b2e0>]}", "name": "SendingEvent", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.328634Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.329421Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.330119Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.330666Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.331181Z"}}
{"data": {"elapsed": 0.030507527, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "SQL status: BEGIN in 0.031 seconds", "name": "SQLQueryStatus", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.361746Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.362440Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.362975Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.363489Z"}}
{"data": {"elapsed": 0.000902182, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.364938Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.388221Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.468714Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.469641Z"}}
{"data": {"elapsed": 0.001779794, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.472201Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.472852Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.473417Z"}}
{"data": {"elapsed": 0.003753633, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "SQL status: SELECT 51 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.477777Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: customers_training, signups_validation, dbt_exposures, dbt_seeds, elementary_test_results, customers_validation, test_dataset, dbt_invocations, dbt_snapshots, orders_training, test_training, orders_validation, test_validation, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, payments_training, data_monitoring_metrics, dbt_models, dbt_sources, test_result_rows, payments_validation, signups_training, dbt_columns, dbt_run_results, dbt_tests, metadata, stg_payments, customers, stg_signups, returned_orders, test4_column_anomaly, stg_customers, test_practice, test4_volume_anomaly, test4schema, orders, stg_orders, test_volume, alerts_anomaly_detection, alerts_dbt_tests, metrics_anomaly_score, monitors_runs, alerts_schema_changes, job_run_results, model_run_results, snapshot_run_results, alerts_dbt_source_freshness, dbt_artifacts_hashes, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.488886Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.512083Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.512760Z"}}
{"data": {"elapsed": 0.008249228, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "SQL status: SELECT 19 in 0.008 seconds", "name": "SQLQueryStatus", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.521616Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.531174Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"demo_0819\".\"public\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"demo_0819\".\"public\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.531863Z"}}
{"data": {"elapsed": 0.0018595629, "status": "SELECT 12"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "SQL status: SELECT 12 in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.534354Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"returned_orders\", \"unique_id\": \"model.elementary_tutorial.returned_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table contains all of the returned orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/returned_orders.sql\"}, {\"name\": \"test4_volume_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_volume_anomaly.sql\"}, {\"name\": \"customers\", \"unique_id\": \"model.elementary_tutorial.customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/customers.sql\"}, {\"name\": \"orders\", \"unique_id\": \"model.elementary_tutorial.orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about orders, as well as some derived facts based on payments\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/orders.sql\"}, {\"name\": \"test4_column_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_column_anomaly.sql\"}, {\"name\": \"stg_customers\", \"unique_id\": \"model.elementary_tutorial.stg_customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_customers\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_customers.sql\"}, {\"name\": \"test_practice\", \"unique_id\": \"model.elementary_tutorial.test_practice\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_practice.sql\"}, {\"name\": \"stg_payments\", \"unique_id\": \"model.elementary_tutorial.stg_payments\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_payments\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_payments.sql\"}, {\"name\": \"stg_orders\", \"unique_id\": \"model.elementary_tutorial.stg_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_orders\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_orders.sql\"}, {\"name\": \"stg_signups\", \"unique_id\": \"model.elementary_tutorial.stg_signups\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_signups\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_signups.sql\"}, {\"name\": \"test_volume\", \"unique_id\": \"model.elementary_tutorial.test_volume\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_volume\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_volume.sql\"}, {\"name\": \"test4schema\", \"unique_id\": \"model.elementary_tutorial.test4schema\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4schema.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "info", "msg": "Elementary: [{\"name\": \"returned_orders\", \"unique_id\": \"model.elementary_tutorial.returned_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table contains all of the returned orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/returned_orders.sql\"}, {\"name\": \"test4_volume_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_volume_anomaly.sql\"}, {\"name\": \"customers\", \"unique_id\": \"model.elementary_tutorial.customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/customers.sql\"}, {\"name\": \"orders\", \"unique_id\": \"model.elementary_tutorial.orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about orders, as well as some derived facts based on payments\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/orders.sql\"}, {\"name\": \"test4_column_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_column_anomaly.sql\"}, {\"name\": \"stg_customers\", \"unique_id\": \"model.elementary_tutorial.stg_customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_customers\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_customers.sql\"}, {\"name\": \"test_practice\", \"unique_id\": \"model.elementary_tutorial.test_practice\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_practice.sql\"}, {\"name\": \"stg_payments\", \"unique_id\": \"model.elementary_tutorial.stg_payments\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_payments\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_payments.sql\"}, {\"name\": \"stg_orders\", \"unique_id\": \"model.elementary_tutorial.stg_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_orders\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_orders.sql\"}, {\"name\": \"stg_signups\", \"unique_id\": \"model.elementary_tutorial.stg_signups\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_signups\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_signups.sql\"}, {\"name\": \"test_volume\", \"unique_id\": \"model.elementary_tutorial.test_volume\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_volume\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_volume.sql\"}, {\"name\": \"test4schema\", \"unique_id\": \"model.elementary_tutorial.test4schema\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4schema.sql\"}]", "name": "JinjaLogInfo", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.544399Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.545412Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.547336Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3244224, "process_in_blocks": "0", "process_kernel_time": 0.379429, "process_mem_max_rss": "124276736", "process_out_blocks": "0", "process_user_time": 2.754489}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3244224, \"process_user_time\": 2.754489, \"process_kernel_time\": 0.379429, \"process_mem_max_rss\": \"124276736\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.556863Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:21:40.557727Z", "elapsed": 1.3254714, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:21:40.557727 after 1.33 seconds", "name": "CommandCompleted", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.557858Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.558499Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d11a440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e253d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ed2a800>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d11a440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e253d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ed2a800>]}", "name": "SendingEvent", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.559035Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "f27877d8-52c0-4708-b911-ffca4074acf9", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49119, "thread": "MainThread", "ts": "2024-08-19T02:21:40.559698Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c0de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d825840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d825f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c0de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d825840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d825f00>]}", "name": "SendingEvent", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:23:59.025425Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:23:59.043851Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'introspect': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:23:59.045432Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c16a320>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c16a320>]}", "name": "SendingEvent", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:00.536198Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d246740>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d246740>]}", "name": "SendingEvent", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:00.930164Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:00.938107Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:01.050127Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:02.318390Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:02.319417Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e9a8eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e9a8eb0>]}", "name": "SendingEvent", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:02.791366Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e90c880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e90c880>]}", "name": "SendingEvent", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.537005Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.538246Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e959f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'c5ef7ea0-1835-4c79-9a21-e7f0e46681d4', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e959f30>]}", "name": "SendingEvent", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.539141Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.540299Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.541386Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.542292Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.543156Z"}}
{"data": {"elapsed": 0.16558623, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "SQL status: BEGIN in 0.166 seconds", "name": "SQLQueryStatus", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.708841Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.710077Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.711254Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.712245Z"}}
{"data": {"elapsed": 0.0011224069, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.714366Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:03.748791Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.029810Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.031017Z"}}
{"data": {"elapsed": 0.008120526, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "SQL status: BEGIN in 0.008 seconds", "name": "SQLQueryStatus", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.040193Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.042095Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.043173Z"}}
{"data": {"elapsed": 0.025540732, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "SQL status: SELECT 51 in 0.026 seconds", "name": "SQLQueryStatus", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.069948Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, test_result_rows, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metadata, alerts_dbt_source_freshness, stg_payments, stg_signups, test_practice, stg_customers, stg_orders, test_volume, dbt_artifacts_hashes, metrics_anomaly_score, monitors_runs, job_run_results, alerts_anomaly_detection, model_run_results, snapshot_run_results, customers, alerts_dbt_tests, returned_orders, alerts_schema_changes, test4_column_anomaly, orders, test4_volume_anomaly, test4schema, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.088434Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.122741Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"demo_0819\".\"public\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    select * from \"demo_0819\".\"public\".\"dbt_invocations\" order by generated_at desc limit 1\n  \n  ", "name": "SQLQuery", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.123784Z"}}
{"data": {"elapsed": 0.013706492, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "SQL status: SELECT 1 in 0.014 seconds", "name": "SQLQueryStatus", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.138477Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"job_id\": null, \"job_name\": null, \"job_run_id\": null, \"run_started_at\": \"2024-08-19 02:23:25\", \"run_completed_at\": \"2024-08-19 02:23:31\", \"generated_at\": \"2024-08-19 02:23:31\", \"created_at\": \"2024-08-19T02:23:31.591920\", \"command\": \"test\", \"dbt_version\": \"1.8.3\", \"elementary_version\": \"0.15.2\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"dev\", \"target_database\": \"demo_0819\", \"target_schema\": \"public\", \"target_profile_name\": \"elementary\", \"threads\": 1, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": null, \"project_name\": \"elementary_tutorial\", \"env\": null, \"env_id\": null, \"cause_category\": null, \"cause\": null, \"pull_request_id\": null, \"git_sha\": null, \"orchestrator\": null, \"dbt_user\": null, \"job_url\": null, \"job_run_url\": null, \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"dbt_user\\\"}\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"job_id\": null, \"job_name\": null, \"job_run_id\": null, \"run_started_at\": \"2024-08-19 02:23:25\", \"run_completed_at\": \"2024-08-19 02:23:31\", \"generated_at\": \"2024-08-19 02:23:31\", \"created_at\": \"2024-08-19T02:23:31.591920\", \"command\": \"test\", \"dbt_version\": \"1.8.3\", \"elementary_version\": \"0.15.2\", \"full_refresh\": false, \"invocation_vars\": \"{}\", \"vars\": \"{}\", \"target_name\": \"dev\", \"target_database\": \"demo_0819\", \"target_schema\": \"public\", \"target_profile_name\": \"elementary\", \"threads\": 1, \"selected\": \"[]\", \"yaml_selector\": null, \"project_id\": null, \"project_name\": \"elementary_tutorial\", \"env\": null, \"env_id\": null, \"cause_category\": null, \"cause\": null, \"pull_request_id\": null, \"git_sha\": null, \"orchestrator\": null, \"dbt_user\": null, \"job_url\": null, \"job_run_url\": null, \"account_id\": null, \"target_adapter_specific_fields\": \"{\\\"user\\\": \\\"dbt_user\\\"}\"}]", "name": "JinjaLogInfo", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.152844Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.154117Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.159940Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 5.6344705, "process_in_blocks": "0", "process_kernel_time": 0.619266, "process_mem_max_rss": "124588032", "process_out_blocks": "0", "process_user_time": 4.261614}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 5.6344705, \"process_user_time\": 4.261614, \"process_kernel_time\": 0.619266, \"process_mem_max_rss\": \"124588032\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.198920Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:04.200097Z", "elapsed": 5.635915, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:04.200097 after 5.64 seconds", "name": "CommandCompleted", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.200295Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.201518Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c0de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cc2f460>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d227130>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c0de3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cc2f460>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d227130>]}", "name": "SendingEvent", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.202553Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "c5ef7ea0-1835-4c79-9a21-e7f0e46681d4", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49354, "thread": "MainThread", "ts": "2024-08-19T02:24:04.203637Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e54a3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113d41840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113d41f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e54a3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113d41840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113d41f00>]}", "name": "SendingEvent", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.140433Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.150427Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_adapter_type_and_unique_id\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.151974Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e5d6320>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e5d6320>]}", "name": "SendingEvent", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.408156Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11377a740>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11377a740>]}", "name": "SendingEvent", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.486717Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.488044Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.528106Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.921020Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:10.921765Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114df4eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114df4eb0>]}", "name": "SendingEvent", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.060709Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114d60880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114d60880>]}", "name": "SendingEvent", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.284479Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.285299Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114dadf30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'be970907-da20-497a-89d2-3098b90f5d06', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114dadf30>]}", "name": "SendingEvent", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.285872Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.286622Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.287195Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.287725Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.288247Z"}}
{"data": {"elapsed": 0.03174396, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "SQL status: BEGIN in 0.032 seconds", "name": "SQLQueryStatus", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.320052Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.320769Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.321316Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.321843Z"}}
{"data": {"elapsed": 0.000881986, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.323261Z"}}
{"data": {"msg": "Elementary: [\"postgres\", \"localhost\"]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "info", "msg": "Elementary: [\"postgres\", \"localhost\"]", "name": "JinjaLogInfo", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.339232Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.339967Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3074561, "process_in_blocks": "0", "process_kernel_time": 0.460718, "process_mem_max_rss": "119853056", "process_out_blocks": "0", "process_user_time": 3.594088}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3074561, \"process_user_time\": 3.594088, \"process_kernel_time\": 0.460718, \"process_mem_max_rss\": \"119853056\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.349673Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:11.350429Z", "elapsed": 1.3083855, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:11.350429 after 1.31 seconds", "name": "CommandCompleted", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.350589Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.351270Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e54a3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11417c730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114dadc30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e54a3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11417c730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114dadc30>]}", "name": "SendingEvent", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.351839Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "be970907-da20-497a-89d2-3098b90f5d06", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49359, "thread": "MainThread", "ts": "2024-08-19T02:24:11.352416Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115dce3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b661840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b661f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115dce3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b661840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b661f00>]}", "name": "SendingEvent", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:14.673171Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:14.680645Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_elementary_database_and_schema\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:14.681478Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115e5e320>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115e5e320>]}", "name": "SendingEvent", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:14.895837Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b086740>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11b086740>]}", "name": "SendingEvent", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:14.965790Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:14.967294Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:14.998827Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.336698Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.337363Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c6e8eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c6e8eb0>]}", "name": "SendingEvent", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.474181Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c64c880>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c64c880>]}", "name": "SendingEvent", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.692493Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.693296Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c69df30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '4155e315-42c8-4ce8-a72e-8d3141f2d84f', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c69df30>]}", "name": "SendingEvent", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.693856Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.694674Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.695275Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.695799Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.696311Z"}}
{"data": {"elapsed": 0.033093892, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "SQL status: BEGIN in 0.033 seconds", "name": "SQLQueryStatus", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.729473Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.730184Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.730849Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.731409Z"}}
{"data": {"elapsed": 0.000999323, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.732945Z"}}
{"data": {"msg": "Elementary: \"demo_0819.public\""}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "info", "msg": "Elementary: \"demo_0819.public\"", "name": "JinjaLogInfo", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.751354Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.752063Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.1684136, "process_in_blocks": "0", "process_kernel_time": 0.35347, "process_mem_max_rss": "119660544", "process_out_blocks": "0", "process_user_time": 2.714311}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.1684136, \"process_user_time\": 2.714311, \"process_kernel_time\": 0.35347, \"process_mem_max_rss\": \"119660544\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.762911Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:15.763639Z", "elapsed": 1.1693289, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:15.763639 after 1.17 seconds", "name": "CommandCompleted", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.763761Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.764362Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115dce3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ba4c730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c69dc30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115dce3e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ba4c730>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11c69dc30>]}", "name": "SendingEvent", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.764911Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "4155e315-42c8-4ce8-a72e-8d3141f2d84f", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49366, "thread": "MainThread", "ts": "2024-08-19T02:24:15.765475Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ec3e380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1203779a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1203772e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ec3e380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1203779a0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1203772e0>]}", "name": "SendingEvent", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:19.479521Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:19.489638Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_test_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720, \"disable_passed_test_metrics\": false}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:19.490606Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ecd30a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ecd30a0>]}", "name": "SendingEvent", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:19.754348Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11fde84f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11fde84f0>]}", "name": "SendingEvent", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:19.834603Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:19.836879Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:19.874222Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.502523Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.503744Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1214a0e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1214a0e50>]}", "name": "SendingEvent", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.679096Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12140d5a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x12140d5a0>]}", "name": "SendingEvent", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.993780Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.994893Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121459120>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '667e8c42-dbee-4343-98e0-1a66cad1082a', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121459120>]}", "name": "SendingEvent", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.995750Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.997041Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:20.998082Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.001372Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.002780Z"}}
{"data": {"elapsed": 0.071223214, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "SQL status: BEGIN in 0.071 seconds", "name": "SQLQueryStatus", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.074009Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.075081Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.076034Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.076711Z"}}
{"data": {"elapsed": 0.001466351, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.078838Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.289453Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"demo_0819\".\"public\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_run_results as (\n        select * from \"demo_0819\".\"public\".\"dbt_run_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(execute_completed_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"demo_0819\".\"public\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"demo_0819\".\"public\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"demo_0819\".\"public\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.original_path,\n        dbt_tests.meta,\n        dbt_tests.package_name,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at,\n        dbt_run_results.execution_time as execution_time\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n    left join dbt_run_results on elementary_test_results.test_execution_id = dbt_run_results.model_execution_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            original_path,\n            package_name,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            execution_time,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with test_results as (\n            \n    with elementary_test_results as (\n        select * from \"demo_0819\".\"public\".\"elementary_test_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_run_results as (\n        select * from \"demo_0819\".\"public\".\"dbt_run_results\"\n        \n            where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(execute_completed_at as timestamp))::date)\n     < 7\n        \n    ),\n\n    dbt_tests as (\n        select * from \"demo_0819\".\"public\".\"dbt_tests\"\n    ),\n\n    dbt_models as (\n        select * from \"demo_0819\".\"public\".\"dbt_models\"\n    ),\n\n    dbt_sources as (\n        select * from \"demo_0819\".\"public\".\"dbt_sources\"\n    ),\n\n    dbt_artifacts as (\n        select unique_id, meta, tags, owner from dbt_models\n        union all\n        select unique_id, meta, tags, owner from dbt_sources\n    ),\n\n    first_time_test_occurred as (\n        select \n            min(detected_at) as first_time_occurred,\n            test_unique_id\n        from elementary_test_results\n        group by test_unique_id\n    )\n\n    select\n        elementary_test_results.id,\n        \n        case\n            when elementary_test_results.test_type = 'schema_change' then elementary_test_results.test_unique_id\n            \n            when dbt_tests.short_name = 'dimension_anomalies' then elementary_test_results.test_unique_id\n            else coalesce(elementary_test_results.test_unique_id, 'None') || '.' || coalesce(elementary_test_results.column_name, 'None') || '.' || coalesce(elementary_test_results.test_sub_type, 'None')\n        end as elementary_unique_id,\n        elementary_test_results.invocation_id,\n        elementary_test_results.data_issue_id,\n        elementary_test_results.test_execution_id,\n        elementary_test_results.test_unique_id,\n        elementary_test_results.model_unique_id,\n        elementary_test_results.detected_at,\n        elementary_test_results.database_name,\n        elementary_test_results.schema_name,\n        elementary_test_results.table_name,\n        elementary_test_results.column_name,\n        elementary_test_results.test_type,\n        elementary_test_results.test_sub_type,\n        elementary_test_results.test_results_description,\n        elementary_test_results.owners,\n        elementary_test_results.tags,\n        elementary_test_results.test_results_query,\n        elementary_test_results.other,\n        case\n            when dbt_tests.short_name is not null then dbt_tests.short_name\n            else elementary_test_results.test_name\n        end as test_name,\n        elementary_test_results.test_params,\n        elementary_test_results.severity,\n        elementary_test_results.status,\n        \n        dbt_tests.short_name,\n        elementary_test_results.test_alias,\n        elementary_test_results.failures,\n        elementary_test_results.result_rows,\n        dbt_tests.original_path,\n        dbt_tests.meta,\n        dbt_tests.package_name,\n        dbt_tests.tags as test_tags,\n        dbt_artifacts.meta as model_meta,\n        dbt_artifacts.tags as model_tags,\n        dbt_artifacts.owner as model_owner,\n        first_occurred.first_time_occurred as test_created_at,\n        dbt_run_results.execution_time as execution_time\n    from elementary_test_results\n    join dbt_tests on elementary_test_results.test_unique_id = dbt_tests.unique_id\n    left join first_time_test_occurred first_occurred on elementary_test_results.test_unique_id = first_occurred.test_unique_id\n    left join dbt_artifacts on elementary_test_results.model_unique_id = dbt_artifacts.unique_id\n    left join dbt_run_results on elementary_test_results.test_execution_id = dbt_run_results.model_execution_id\n\n        ),\n\n        ordered_test_results as (\n            select\n                *,\n                \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     as days_diff,\n                \n                rank() over (partition by elementary_unique_id order by detected_at desc) as invocations_rank_index\n            from test_results\n        )\n\n        select \n            id,\n            invocation_id,\n            test_execution_id,\n            model_unique_id,\n            test_unique_id,\n            elementary_unique_id,\n            detected_at,\n            database_name,\n            schema_name,\n            table_name,\n            column_name,\n            test_type,\n            test_sub_type,\n            test_results_description,\n            original_path,\n            package_name,\n            owners,\n            model_owner,\n            tags,\n            test_tags,\n            model_tags,\n            meta,\n            model_meta,\n            test_results_query,\n            other,\n            test_name,\n            test_params,\n            severity,\n            status,\n            execution_time,\n            days_diff,\n            invocations_rank_index,\n            failures,\n            result_rows\n        from ordered_test_results\n        where invocations_rank_index <= 720\n        order by elementary_unique_id, invocations_rank_index desc\n  ", "name": "SQLQuery", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.290710Z"}}
{"data": {"elapsed": 0.011703292, "status": "SELECT 47"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "SQL status: SELECT 47 in 0.012 seconds", "name": "SQLQueryStatus", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.303865Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.314845Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"demo_0819\".\"public\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n  select\n    elementary_test_results_id,\n    result_row\n  from \"demo_0819\".\"public\".\"test_result_rows\"\n  where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(detected_at as timestamp))::date)\n     < 7\n  \n  ", "name": "SQLQuery", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.315481Z"}}
{"data": {"elapsed": 0.007185674, "status": "SELECT 209"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "SQL status: SELECT 209 in 0.007 seconds", "name": "SQLQueryStatus", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.323383Z"}}
{"data": {"msg": "Elementary: [{\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819021745888153\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022057156017\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:22:45\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022242109160\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:22:55\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022252633140\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:23:30\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022327905424\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819021746308555\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"8cc33c1c966dc92958cabaec1d282bbb\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count\", \"detected_at\": \"2024-08-19T02:22:42\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"null_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('null_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('name' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5580ad43e9a315471cbcdd80c9b647a2\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count\", \"detected_at\": \"2024-08-19T02:22:53\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"null_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('null_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('name' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8a18c36b87622a2c87ce6fc67baba1de\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count\", \"detected_at\": \"2024-08-19T02:23:28\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"null_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('null_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('name' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819021746551030\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"e65c777eb1db59de2ac2e1e5a89b6347\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count\", \"detected_at\": \"2024-08-19T02:22:42\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"zero_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('zero_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('age' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3f66789e1f7e07ec9e8995faa78585a2\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count\", \"detected_at\": \"2024-08-19T02:22:53\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"zero_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('zero_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('age' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"485edaae99f0f1e4a026fd8f94864e05\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count\", \"detected_at\": \"2024-08-19T02:23:28\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"zero_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('zero_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('age' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819021746811117\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022058084574\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:22:45\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022243099615\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:22:55\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022253610288\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:23:30\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022328857867\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": {\"headers\": [{\"id\": \"anomalous_value_timestamp\", \"display_name\": \"timestamp\", \"type\": \"date\"}, {\"id\": \"anomalous_value_generic\", \"display_name\": \"generic\", \"type\": \"int\"}, {\"id\": \"anomalous_value_average_generic\", \"display_name\": \"average generic\", \"type\": \"int\"}], \"test_rows_sample\": []}}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819021747103128\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022058374991\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:22:45\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022243321871\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:22:55\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022253865454\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"warn\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 3, \"result_rows\": null, \"sample_data\": [{\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"d2d1b404b84348da3b53004aafeb0859\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\"}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"e52b5f446d8c9dadecb273a8f2a34ee3\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\"}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"8e5d9f9c069d961d9635a3d7a44f5b17\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\"}]}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"warn\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 3, \"result_rows\": null, \"sample_data\": [{\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"d2d1b404b84348da3b53004aafeb0859\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\"}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"e52b5f446d8c9dadecb273a8f2a34ee3\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\"}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"8e5d9f9c069d961d9635a3d7a44f5b17\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\"}]}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"warn\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 3, \"result_rows\": null, \"sample_data\": [{\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"d2d1b404b84348da3b53004aafeb0859\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\"}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"e52b5f446d8c9dadecb273a8f2a34ee3\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\"}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"8e5d9f9c069d961d9635a3d7a44f5b17\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\"}]}, {\"id\": \"2b8410462117cedc6038024b2b41d6a9\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ede8997e3958d08762db9b0255e9ba3\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2123e61fb08332fdefafb1c8bad8a0f7\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:22:43\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b7c685076546c3b31bf756105fcc4e03\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6ddf70bf03e8fd154b7c9a79edbf0ae9\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"b0170f1946093808b6f1e6260977e13a\", \"metric_id\": \"bf5e28a94431dea275571fed6c5bfecd\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"4b40721eacbcd4ab64361fd1e545c5ce\", \"metric_id\": \"121d2b49eaa2513e6933ef2fe32a6f47\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"ae6e0815173ef2df92c77e039c94702c\", \"metric_id\": \"7802f38c4ec801e284a71c0ad6191026\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"04d15836516837b36afb6b62206b6828\", \"metric_id\": \"38aa31cc443dbc0be8d4103644253bab\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"042fdcf2a095d82aece8a6874e67f698\", \"metric_id\": \"3498df239b5cd13f8e4b43501c835010\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"addb896d88b46ef0b8b31e94a07eba4e\", \"metric_id\": \"3a103f247254724e645df3463faf3e55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"e7e82e0cbbd12413c072825c297ffc88\", \"metric_id\": \"134d4009d5805e1ce9ce24df7f062303\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"7eb604dba876a2c358912a2d8fe41496\", \"metric_id\": \"1e0eacf9e5039e7261548e4d18b04228\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"8c54a1374ead44b75f1eb1710617f205\", \"metric_id\": \"2b39525e4dc69e056af5864db9bb286a\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"c778ec5c1fc39633561a1a3bef7f7bc7\", \"metric_id\": \"590d8770e38c3f1a5694a8b80c248070\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"15efacf8ce2ee24b98be1da34bfae101\", \"metric_id\": \"86b486058658ba99b9528de9af6e9af7\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"795f69946d5fe92ea3f3eaa8ac45c5cc\", \"metric_id\": \"7c0b7d47eceaa9381bd04f80eb2a2f0a\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"6ddf70bf03e8fd154b7c9a79edbf0ae9\", \"metric_id\": \"7c00e686f72865bf2a04f7489fa385c5\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"985bca06bd242cc45745fe9330cbe9d1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4d8a4a73ebdcd8b3aaeb7e20df4dd55f\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"86f618329eca768ab035136d45b64794\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:22:43\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb4ca4edcb257a32a2745cbb318a9fbd\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3f99571347885cfb9d28db21c66a6967\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"3130049a279616c016e6c5ae54453c62\", \"metric_id\": \"48996974c39b647abb0971b36df2cb11\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"c4659d1439c2fa8c51e6b4e621eda1f0\", \"metric_id\": \"d290e8b6f9ca876ef105c04b5f561984\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"ad1342ffe8294dd39d19fbd58f009dc3\", \"metric_id\": \"09ce18b53e0f7e67cac0ffc6f36d7f93\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"2f949ae7c40a76098749ef7039f2ab6f\", \"metric_id\": \"3b8b88e1121e5bd50647b959d014c0e3\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"a5e937da00eb455e62d5b8250b1ce283\", \"metric_id\": \"04db7b311323b3843d0c5d46fb40ad6e\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"c97cdb7bc06d256c32dbb9393f3b7c09\", \"metric_id\": \"622b1a721beee3d1bcefd8ea8ee213eb\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"5f582b8de37d3c19f58c979c474109dc\", \"metric_id\": \"27f8fa5835a5fcb6448ba1dcb046df89\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"8b80411d128e5870a3fdab2924df76b6\", \"metric_id\": \"1a3a427497d64fa03d19f5c609dac3d2\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"6d0af0feae0c9e52409d7d44d9d7149c\", \"metric_id\": \"e95fe5d7b0bd4ca5b2f6f886a4b075ae\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"208c42c67d1666d331296772cfd4e97f\", \"metric_id\": \"514e5650529fc063197040313587d7f0\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"e1b8aef9217575aa2d71deb963cc6683\", \"metric_id\": \"e92235b400b2159c2d22f8bd79462c0e\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"6c410a6ee80da01c123d792d41a60e07\", \"metric_id\": \"ffb9dc048a2831ae5b1c3d42570f471b\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"3f99571347885cfb9d28db21c66a6967\", \"metric_id\": \"c5c02803852704d321e1044f687d2ee3\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"baf6d8d166b6b39224898cbf11e3d015\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"df8651a0f0094a7eb6ee16410e0956e9\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e4cef3f05e1bfb6fa0bdfd873b39c049\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:22:44\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 10.286.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b147b7763aa11c0bfa5e5d903b3fcb52\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 10.286.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ced6a34b28991503784d19429204c83\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 10.286.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 1, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"08e032e884f1e655b3c51fc58e59c50f\", \"metric_id\": \"96010dc87af5fb92b4266759289b7a08\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"1bacd16925a6b8164cd27f902d5284d4\", \"metric_id\": \"153070c574d8a1753a1100c60abb5b81\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"7f65de65d50dbf9a11a349d07edb5eb8\", \"metric_id\": \"d8c977d0b04af08ef5b6bfd853aff6c7\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"b6f8c5ec8b12b07cbc2383476e925f06\", \"metric_id\": \"4f193cdacbacd952522a8a05097a85e4\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"cfe1f8ec8aeb81866b8732920b4628f3\", \"metric_id\": \"cb386952cea100d725e447584231af12\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"ae0065fd1d25c8ec40f24eebe64e4cb2\", \"metric_id\": \"760abbe4eb8270612c1822aeeefca322\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"57746d5e31b8c6d032b6a21a2ebd7764\", \"metric_id\": \"16af441d0fd2f8306d4577f6849de834\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"502e5e1837234d74d2af3a92494a2a66\", \"metric_id\": \"5a0d0d5635cd89445b1a3ea5851c9143\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"f3a303270a0b09e02461611bd1b7e33f\", \"metric_id\": \"366be3bd6dc037a170a9cbabba9357cd\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"b0ff951d904db390cbc58c6663830459\", \"metric_id\": \"a76f476469394841f226f4e2fdde81cd\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"ad85298ea8a097b2d18c144e428ea676\", \"metric_id\": \"8d800a4affc1b046917db3d6c6bf3d8b\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 144.0, \"average\": 11.076923076923077, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"33696dc45fb1b1077b7fe82e99b9b284\", \"metric_id\": \"316e5ac6375c270fb112950627ad998c\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 3.328201177351375, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 144.0, \"min_metric_value\": 0.0, \"max_metric_value\": 51.01533720513957, \"training_avg\": 11.076923076923077, \"training_stddev\": 39.9384141282165, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 144.000. The average for this metric is 11.077.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": true}, {\"value\": 0.0, \"average\": 10.285714285714286, \"min_value\": 0.0, \"max_value\": 48.771333121103396, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"3ced6a34b28991503784d19429204c83\", \"metric_id\": \"4456017a1fb4fcd641411ce89c3ddab1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": -0.2672612419124244, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 48.771333121103396, \"training_avg\": 10.285714285714286, \"training_stddev\": 38.48561883538911, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 10.286.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:22:44\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:23:30\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 1, \"result_rows\": null, \"sample_data\": [{\"actual_count\": 583, \"expected_count\": 300}]}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "info", "msg": "Elementary: [{\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819021745888153\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022057156017\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:22:45\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022242109160\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:22:55\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022252633140\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_customers_zero_count__number_of_orders__signup_date.e012735381.number_of_orders.generic\", \"detected_at\": \"2024-08-19T02:23:30\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": \"number_of_orders\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_e012735381_eleme__anomaly_scores__tmp_20240819022327905424\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\"], \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"column_name\\\": \\\"number_of_orders\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819021746308555\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5c88e6fb20_eleme__anomaly_scores__tmp_20240819022057578696\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"8cc33c1c966dc92958cabaec1d282bbb\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count\", \"detected_at\": \"2024-08-19T02:22:42\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"null_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('null_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('name' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5580ad43e9a315471cbcdd80c9b647a2\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count\", \"detected_at\": \"2024-08-19T02:22:53\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"null_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('null_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('name' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"8a18c36b87622a2c87ce6fc67baba1de\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__null_count__name.5c88e6fb20.name.null_count\", \"detected_at\": \"2024-08-19T02:23:28\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"name\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"null_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_anomalies\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('null_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('name' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"null_count\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"name\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819021746551030\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.generic\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_21be7f55a1_eleme__anomaly_scores__tmp_20240819022057819111\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 1\\n    else\\n        \\n        abs(anomaly_score) > 1\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"e65c777eb1db59de2ac2e1e5a89b6347\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count\", \"detected_at\": \"2024-08-19T02:22:42\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"zero_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('zero_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('age' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3f66789e1f7e07ec9e8995faa78585a2\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count\", \"detected_at\": \"2024-08-19T02:22:53\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"zero_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('zero_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('age' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"485edaae99f0f1e4a026fd8f94864e05\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_column_anomalies_test4_column_anomaly_1__zero_count__max__age.21be7f55a1.age.zero_count\", \"detected_at\": \"2024-08-19T02:23:28\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"column_name\": \"age\", \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"zero_count\", \"test_results_description\": \"\\n      \\n          Not enough data to calculate anomaly score.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Column-level anomaly monitors (null_count, null_percent, zero_count, string_length, variance, etc.) on the column according to its data type.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_COLUMN_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('zero_count' as varchar(4096))\\n          and upper(column_name) = upper(cast('age' as varchar(4096)))\", \"other\": null, \"test_name\": \"column_anomalies\", \"test_params\": \"{\\\"column_anomalies\\\": [\\\"zero_count\\\", \\\"max\\\"], \\\"anomaly_sensitivity\\\": 1, \\\"column_name\\\": \\\"age\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_column_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": []}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819021746811117\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022058084574\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:22:45\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022243099615\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:22:55\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022253610288\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"model_unique_id\": \"model.elementary_tutorial.orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_dimension_anomalies_orders_status.a5036d4371\", \"detected_at\": \"2024-08-19T02:23:30\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the frequency of values in the configured dimensions over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n        \\n        \\n        \\n\\n        select * from (with anomaly_scores as (\\n        select\\n            id,\\n            metric_id,\\n            test_execution_id,\\n            test_unique_id,\\n            detected_at,\\n            full_table_name,\\n            column_name,\\n            metric_name,\\n            anomaly_score,\\n            anomaly_score_threshold,\\n            anomalous_value,\\n            bucket_start,\\n            bucket_end,\\n            bucket_seasonality,\\n            metric_value,\\n            min_metric_value,\\n            max_metric_value,\\n            training_avg,\\n            training_stddev,\\n            training_set_size,\\n            training_start,\\n            training_end,\\n            dimension,\\n            dimension_value,\\n            \\n    case\\n        when dimension is not null and column_name is null then \\n    'The last ' || metric_name || ' value for dimension ' || dimension || ' - ' ||\\n    case when dimension_value is null then 'NULL' else dimension_value end || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when dimension is not null and column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value for dimension ' || dimension || ' is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when metric_name = 'freshness' then \\n    'Last update was at ' || anomalous_value || ', ' || cast(abs(round(cast(metric_value/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours ago. Usually the table is updated within ' || cast(abs(round(cast(training_avg/3600 as numeric(28,6)), 2)) as varchar(4096)) || ' hours.'\\n\\n        when column_name is null then \\n    'The last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        when column_name is not null then \\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || cast(round(cast(metric_value as numeric(28,6)), 3) as varchar(4096)) ||\\n    '. The average for this metric is ' || cast(round(cast(training_avg as numeric(28,6)), 3) as varchar(4096)) || '.'\\n\\n        else null\\n    end as anomaly_description\\n,\\n            max(bucket_end) over (partition by test_execution_id) as max_bucket_end\\n        from \\\"demo_0819\\\".\\\"public\\\".\\\"test_a5036d4371_eleme__anomaly_scores__tmp_20240819022328857867\\\"\\n      ),\\n      anomaly_scores_with_is_anomalous as (\\n        select\\n          *,\\ncase when\\n          (\\n            \\n  (anomaly_score is not null and\\n  (\\n    \\n  (\\n    metric_value = 0 and \\n    \\n      1 = 2\\n    \\n  )\\n or\\n    (\\n      case when metric_name IN \\n        ( 'freshness' ,  'event_freshness'  )\\n then\\n            anomaly_score > 3\\n    else\\n        \\n        abs(anomaly_score) > 3\\n    \\n\\n     end and\\n      (\\n  \\n  \\n  \\n  \\n    \\n        (1 = 1)\\n    \\n\\n    and\\n\\n    \\n        (1 = 1)\\n    \\n  \\n  )\\n    )\\n  ))\\n\\n          )\\n          and bucket_end >= \\n    cast(max_bucket_end as timestamp) + cast('-2' as integer) * INTERVAL '1 day'\\n\\n          then TRUE else FALSE end as is_anomalous\\n        from anomaly_scores\\n      ),\\n\\n      final_results as (\\n          select\\n          metric_value as value,\\n          training_avg as average,\\n          \\n          case\\n          when is_anomalous = TRUE and 'both' = 'spike' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'spike' then\\n          lag(min_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'spike' then metric_value\\n          else min_metric_value end as min_value,\\n          case\\n          when is_anomalous = TRUE and 'both' = 'drop' then\\n          lag(metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when is_anomalous = TRUE and 'both' != 'drop' then\\n          lag(max_metric_value) over (partition by full_table_name, column_name, metric_name, dimension, dimension_value, bucket_seasonality order by bucket_end)\\n          when 'both' = 'drop' then metric_value\\n          else max_metric_value end as max_value,\\n          bucket_start as start_time,\\n          bucket_end as end_time,\\n          *\\n        from anomaly_scores_with_is_anomalous\\n        order by bucket_end, dimension_value\\n      )\\n\\n      select * from final_results\\n      where 1 = 1) results\\n    where is_anomalous = true\\n\\n    \\n\\n\", \"other\": null, \"test_name\": \"dimension_anomalies\", \"test_params\": \"{\\\"dimensions\\\": [\\\"status\\\"], \\\"model\\\": \\\"{{ get_where_subquery(ref('orders')) }}\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": {\"headers\": [{\"id\": \"anomalous_value_timestamp\", \"display_name\": \"timestamp\", \"type\": \"date\"}, {\"id\": \"anomalous_value_generic\", \"display_name\": \"generic\", \"type\": \"int\"}, {\"id\": \"anomalous_value_average_generic\", \"display_name\": \"average generic\", \"type\": \"int\"}], \"test_rows_sample\": []}}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:17:48\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819021747103128\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 7, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:21:00\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022058374991\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 6, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:22:45\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022243321871\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:22:55\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"column_name\": null, \"test_type\": \"schema_change\", \"test_sub_type\": \"generic\", \"test_results_description\": null, \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"\\n    \\n        \\n        \\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        \\n        \\n\\n\\n        \\n\\n        \\n        \\n        \\n        \\n        \\n\\n        \\n\\n        \\n        \\n        \\n        \\n\\n        \\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_5b49e3c36__schema_changes_alerts__tmp_20240819022253865454\\\"\\n        \\n    \\n\\n\", \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"warn\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 3, \"result_rows\": null, \"sample_data\": [{\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"d2d1b404b84348da3b53004aafeb0859\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\"}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"e52b5f446d8c9dadecb273a8f2a34ee3\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\"}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"8e5d9f9c069d961d9635a3d7a44f5b17\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\"}]}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"warn\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 3, \"result_rows\": null, \"sample_data\": [{\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"d2d1b404b84348da3b53004aafeb0859\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\"}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"e52b5f446d8c9dadecb273a8f2a34ee3\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\"}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"8e5d9f9c069d961d9635a3d7a44f5b17\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\"}]}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"elementary\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors schema changes on the table of deleted, added, type changed columns over time. The test will fail if the table's schema changed from the previous execution of the test.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": null, \"other\": null, \"test_name\": \"schema_changes\", \"test_params\": \"{\\\"model\\\": \\\"{{ get_where_subquery(ref('test4schema')) }}\\\"}\", \"severity\": \"warn\", \"status\": \"warn\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 3, \"result_rows\": null, \"sample_data\": [{\"id\": \"4028a478a14cb6d54524794d2a9fd969\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"d2d1b404b84348da3b53004aafeb0859\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"id\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"id\\\" was removed\"}, {\"id\": \"87f65fd090d08f2754c03e674dd6fc36\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"e52b5f446d8c9dadecb273a8f2a34ee3\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"name\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"name\\\" was removed\"}, {\"id\": \"603b4ed22ed2a703a55adaba4cc2a8e1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"test_unique_id\": \"test.elementary_tutorial.elementary_schema_changes_test4schema_.5b49e3c366\", \"data_issue_id\": \"8e5d9f9c069d961d9635a3d7a44f5b17\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"DEMO_0819\", \"schema_name\": \"PUBLIC\", \"table_name\": \"TEST4SCHEMA\", \"column_name\": \"birth\", \"test_type\": \"schema_change\", \"test_sub_type\": \"column_removed\", \"test_results_description\": \"The column \\\"birth\\\" was removed\"}]}, {\"id\": \"2b8410462117cedc6038024b2b41d6a9\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ede8997e3958d08762db9b0255e9ba3\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"2123e61fb08332fdefafb1c8bad8a0f7\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:22:43\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b7c685076546c3b31bf756105fcc4e03\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"6ddf70bf03e8fd154b7c9a79edbf0ae9\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"model_unique_id\": \"model.elementary_tutorial.customers\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c.None.row_count\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"volume_anomalies\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.CUSTOMERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('customers')) }}\\\", \\\"timestamp_column\\\": \\\"signup_date\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"warn\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"b0170f1946093808b6f1e6260977e13a\", \"metric_id\": \"bf5e28a94431dea275571fed6c5bfecd\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"4b40721eacbcd4ab64361fd1e545c5ce\", \"metric_id\": \"121d2b49eaa2513e6933ef2fe32a6f47\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"ae6e0815173ef2df92c77e039c94702c\", \"metric_id\": \"7802f38c4ec801e284a71c0ad6191026\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"04d15836516837b36afb6b62206b6828\", \"metric_id\": \"38aa31cc443dbc0be8d4103644253bab\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"042fdcf2a095d82aece8a6874e67f698\", \"metric_id\": \"3498df239b5cd13f8e4b43501c835010\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"addb896d88b46ef0b8b31e94a07eba4e\", \"metric_id\": \"3a103f247254724e645df3463faf3e55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"e7e82e0cbbd12413c072825c297ffc88\", \"metric_id\": \"134d4009d5805e1ce9ce24df7f062303\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"7eb604dba876a2c358912a2d8fe41496\", \"metric_id\": \"1e0eacf9e5039e7261548e4d18b04228\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"8c54a1374ead44b75f1eb1710617f205\", \"metric_id\": \"2b39525e4dc69e056af5864db9bb286a\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"c778ec5c1fc39633561a1a3bef7f7bc7\", \"metric_id\": \"590d8770e38c3f1a5694a8b80c248070\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"15efacf8ce2ee24b98be1da34bfae101\", \"metric_id\": \"86b486058658ba99b9528de9af6e9af7\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"795f69946d5fe92ea3f3eaa8ac45c5cc\", \"metric_id\": \"7c0b7d47eceaa9381bd04f80eb2a2f0a\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"6ddf70bf03e8fd154b7c9a79edbf0ae9\", \"metric_id\": \"7c00e686f72865bf2a04f7489fa385c5\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_customers_1.f225f4677c\", \"detected_at\": \"2024-08-19T02:23:29.344439\", \"full_table_name\": \"DEMO_0819.PUBLIC.CUSTOMERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"985bca06bd242cc45745fe9330cbe9d1\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"4d8a4a73ebdcd8b3aaeb7e20df4dd55f\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:20:58\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"86f618329eca768ab035136d45b64794\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:22:43\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"fb4ca4edcb257a32a2745cbb318a9fbd\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3f99571347885cfb9d28db21c66a6967\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e.None.row_count\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"finance\\\", \\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"test_tags\": \"[\\\"elementary-tests\\\", \\\"table_anomalies\\\"]\", \"model_tags\": \"[\\\"finance\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.RETURNED_ORDERS' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"timestamp_column\\\": \\\"order_date\\\", \\\"model\\\": \\\"{{ get_where_subquery(ref('returned_orders')) }}\\\", \\\"where_expression\\\": null, \\\"anomaly_sensitivity\\\": 3, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"ERROR\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 0, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"3130049a279616c016e6c5ae54453c62\", \"metric_id\": \"48996974c39b647abb0971b36df2cb11\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"c4659d1439c2fa8c51e6b4e621eda1f0\", \"metric_id\": \"d290e8b6f9ca876ef105c04b5f561984\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"ad1342ffe8294dd39d19fbd58f009dc3\", \"metric_id\": \"09ce18b53e0f7e67cac0ffc6f36d7f93\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"2f949ae7c40a76098749ef7039f2ab6f\", \"metric_id\": \"3b8b88e1121e5bd50647b959d014c0e3\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"a5e937da00eb455e62d5b8250b1ce283\", \"metric_id\": \"04db7b311323b3843d0c5d46fb40ad6e\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"c97cdb7bc06d256c32dbb9393f3b7c09\", \"metric_id\": \"622b1a721beee3d1bcefd8ea8ee213eb\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"5f582b8de37d3c19f58c979c474109dc\", \"metric_id\": \"27f8fa5835a5fcb6448ba1dcb046df89\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"8b80411d128e5870a3fdab2924df76b6\", \"metric_id\": \"1a3a427497d64fa03d19f5c609dac3d2\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"6d0af0feae0c9e52409d7d44d9d7149c\", \"metric_id\": \"e95fe5d7b0bd4ca5b2f6f886a4b075ae\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"208c42c67d1666d331296772cfd4e97f\", \"metric_id\": \"514e5650529fc063197040313587d7f0\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"e1b8aef9217575aa2d71deb963cc6683\", \"metric_id\": \"e92235b400b2159c2d22f8bd79462c0e\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"6c410a6ee80da01c123d792d41a60e07\", \"metric_id\": \"ffb9dc048a2831ae5b1c3d42570f471b\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"3f99571347885cfb9d28db21c66a6967\", \"metric_id\": \"c5c02803852704d321e1044f687d2ee3\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_returned_orders_order_date.150e06ec8e\", \"detected_at\": \"2024-08-19T02:23:29.647770\", \"full_table_name\": \"DEMO_0819.PUBLIC.RETURNED_ORDERS\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 3, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"baf6d8d166b6b39224898cbf11e3d015\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"df8651a0f0094a7eb6ee16410e0956e9\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 0.000.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"pass\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 0, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e4cef3f05e1bfb6fa0bdfd873b39c049\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:22:44\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 10.286.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"b147b7763aa11c0bfa5e5d903b3fcb52\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 10.286.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"3ced6a34b28991503784d19429204c83\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"elementary_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd.None.row_count\", \"detected_at\": \"2024-08-19T02:23:29\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"column_name\": null, \"test_type\": \"anomaly_detection\", \"test_sub_type\": \"row_count\", \"test_results_description\": \"\\n      \\n          The last row_count value is 0.000. The average for this metric is 10.286.\\n      \\n  \", \"original_path\": \"models/schema.yml\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[\\\"PII\\\", \\\"column_test\\\", \\\"elementary-tests\\\"]\", \"test_tags\": \"[\\\"column_test\\\", \\\"elementary-tests\\\"]\", \"model_tags\": \"[\\\"PII\\\"]\", \"meta\": \"{\\\"description\\\": \\\"Monitors the row count of your table over time.\\\"}\", \"model_meta\": \"{}\", \"test_results_query\": \"select * from (None) results\\n      where\\n        anomaly_score is not null and\\n        upper(full_table_name) = upper(cast('DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY' as varchar(4096))) and\\n        metric_name = cast('row_count' as varchar(4096))\", \"other\": null, \"test_name\": \"volume_anomalies\", \"test_params\": \"{\\\"anomaly_sensitivity\\\": 1, \\\"model\\\": \\\"{{ get_where_subquery(ref('test4_volume_anomaly')) }}\\\", \\\"timestamp_column\\\": \\\"birth\\\", \\\"where_expression\\\": null, \\\"anomaly_direction\\\": \\\"both\\\", \\\"time_bucket\\\": {\\\"period\\\": \\\"day\\\", \\\"count\\\": 1}, \\\"days_back\\\": 14, \\\"backfill_days\\\": 2, \\\"seasonality\\\": null, \\\"freshness_column\\\": null, \\\"event_timestamp_column\\\": null, \\\"dimensions\\\": null, \\\"ignore_small_changes\\\": {\\\"spike_failure_percent_threshold\\\": null, \\\"drop_failure_percent_threshold\\\": null}, \\\"fail_on_zero\\\": false, \\\"detection_delay\\\": {\\\"period\\\": \\\"hour\\\", \\\"count\\\": 0}, \\\"anomaly_exclude_metrics\\\": null, \\\"exclude_final_results\\\": \\\"1 = 1\\\"}\", \"severity\": \"error\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 1, \"result_rows\": null, \"sample_data\": [{\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-06T00:00:00\", \"end_time\": \"2024-08-07T00:00:00\", \"id\": \"08e032e884f1e655b3c51fc58e59c50f\", \"metric_id\": \"96010dc87af5fb92b4266759289b7a08\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-06T00:00:00\", \"bucket_end\": \"2024-08-07T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 2, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-07T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-07T00:00:00\", \"end_time\": \"2024-08-08T00:00:00\", \"id\": \"1bacd16925a6b8164cd27f902d5284d4\", \"metric_id\": \"153070c574d8a1753a1100c60abb5b81\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-07T00:00:00\", \"bucket_end\": \"2024-08-08T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 3, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-08T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-08T00:00:00\", \"end_time\": \"2024-08-09T00:00:00\", \"id\": \"7f65de65d50dbf9a11a349d07edb5eb8\", \"metric_id\": \"d8c977d0b04af08ef5b6bfd853aff6c7\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-08T00:00:00\", \"bucket_end\": \"2024-08-09T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 4, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-09T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-09T00:00:00\", \"end_time\": \"2024-08-10T00:00:00\", \"id\": \"b6f8c5ec8b12b07cbc2383476e925f06\", \"metric_id\": \"4f193cdacbacd952522a8a05097a85e4\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-09T00:00:00\", \"bucket_end\": \"2024-08-10T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 5, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-10T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-10T00:00:00\", \"end_time\": \"2024-08-11T00:00:00\", \"id\": \"cfe1f8ec8aeb81866b8732920b4628f3\", \"metric_id\": \"cb386952cea100d725e447584231af12\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-10T00:00:00\", \"bucket_end\": \"2024-08-11T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 6, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-11T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-11T00:00:00\", \"end_time\": \"2024-08-12T00:00:00\", \"id\": \"ae0065fd1d25c8ec40f24eebe64e4cb2\", \"metric_id\": \"760abbe4eb8270612c1822aeeefca322\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-11T00:00:00\", \"bucket_end\": \"2024-08-12T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 7, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-12T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-12T00:00:00\", \"end_time\": \"2024-08-13T00:00:00\", \"id\": \"57746d5e31b8c6d032b6a21a2ebd7764\", \"metric_id\": \"16af441d0fd2f8306d4577f6849de834\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-12T00:00:00\", \"bucket_end\": \"2024-08-13T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 8, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-13T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-13T00:00:00\", \"end_time\": \"2024-08-14T00:00:00\", \"id\": \"502e5e1837234d74d2af3a92494a2a66\", \"metric_id\": \"5a0d0d5635cd89445b1a3ea5851c9143\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-13T00:00:00\", \"bucket_end\": \"2024-08-14T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 9, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-14T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-14T00:00:00\", \"end_time\": \"2024-08-15T00:00:00\", \"id\": \"f3a303270a0b09e02461611bd1b7e33f\", \"metric_id\": \"366be3bd6dc037a170a9cbabba9357cd\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-14T00:00:00\", \"bucket_end\": \"2024-08-15T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 10, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-15T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-15T00:00:00\", \"end_time\": \"2024-08-16T00:00:00\", \"id\": \"b0ff951d904db390cbc58c6663830459\", \"metric_id\": \"a76f476469394841f226f4e2fdde81cd\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-15T00:00:00\", \"bucket_end\": \"2024-08-16T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 11, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-16T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 0.0, \"average\": 0.0, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-16T00:00:00\", \"end_time\": \"2024-08-17T00:00:00\", \"id\": \"ad85298ea8a097b2d18c144e428ea676\", \"metric_id\": \"8d800a4affc1b046917db3d6c6bf3d8b\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 0.0, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-16T00:00:00\", \"bucket_end\": \"2024-08-17T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 0.0, \"training_avg\": 0.0, \"training_stddev\": 0.0, \"training_set_size\": 12, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-17T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 0.000.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}, {\"value\": 144.0, \"average\": 11.076923076923077, \"min_value\": 0.0, \"max_value\": 0.0, \"start_time\": \"2024-08-17T00:00:00\", \"end_time\": \"2024-08-18T00:00:00\", \"id\": \"33696dc45fb1b1077b7fe82e99b9b284\", \"metric_id\": \"316e5ac6375c270fb112950627ad998c\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": 3.328201177351375, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-17T00:00:00\", \"bucket_end\": \"2024-08-18T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 144.0, \"min_metric_value\": 0.0, \"max_metric_value\": 51.01533720513957, \"training_avg\": 11.076923076923077, \"training_stddev\": 39.9384141282165, \"training_set_size\": 13, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-18T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 144.000. The average for this metric is 11.077.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": true}, {\"value\": 0.0, \"average\": 10.285714285714286, \"min_value\": 0.0, \"max_value\": 48.771333121103396, \"start_time\": \"2024-08-18T00:00:00\", \"end_time\": \"2024-08-19T00:00:00\", \"id\": \"3ced6a34b28991503784d19429204c83\", \"metric_id\": \"4456017a1fb4fcd641411ce89c3ddab1\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"test_unique_id\": \"test.elementary_tutorial.elementary_volume_anomalies_test4_volume_anomaly_1.22dd1cb7dd\", \"detected_at\": \"2024-08-19T02:23:29.886986\", \"full_table_name\": \"DEMO_0819.PUBLIC.TEST4_VOLUME_ANOMALY\", \"column_name\": null, \"metric_name\": \"row_count\", \"anomaly_score\": -0.2672612419124244, \"anomaly_score_threshold\": 1, \"anomalous_value\": null, \"bucket_start\": \"2024-08-18T00:00:00\", \"bucket_end\": \"2024-08-19T00:00:00\", \"bucket_seasonality\": \"no_seasonality\", \"metric_value\": 0.0, \"min_metric_value\": 0.0, \"max_metric_value\": 48.771333121103396, \"training_avg\": 10.285714285714286, \"training_stddev\": 38.48561883538911, \"training_set_size\": 14, \"training_start\": \"2024-08-06T00:00:00\", \"training_end\": \"2024-08-19T00:00:00\", \"dimension\": null, \"dimension_value\": null, \"anomaly_description\": \"The last row_count value is 0.000. The average for this metric is 10.286.\", \"max_bucket_end\": \"2024-08-19T00:00:00\", \"is_anomalous\": false}]}, {\"id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f\", \"test_execution_id\": \"1c9e7708-d20d-4990-a83c-f38f1397061f.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:17:47\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 5, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7\", \"test_execution_id\": \"db0a00f3-f0a1-4ca7-a6f5-595c21b66ee7.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:20:59\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 4, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc\", \"test_execution_id\": \"67d3fdfc-2d42-4172-b41b-86cdea3b03dc.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:22:44\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 3, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57\", \"test_execution_id\": \"5ff98345-a1ab-4123-97a2-4f87e1467a57.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:22:54\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 2, \"failures\": 1, \"result_rows\": null, \"sample_data\": null}, {\"id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.test4_dbt_test\", \"invocation_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55\", \"test_execution_id\": \"e33831e9-b2da-4780-a97c-5dc013c21c55.test.elementary_tutorial.test4_dbt_test\", \"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"test_unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"elementary_unique_id\": \"test.elementary_tutorial.test4_dbt_test.None.singular\", \"detected_at\": \"2024-08-19T02:23:30\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"column_name\": null, \"test_type\": \"dbt_test\", \"test_sub_type\": \"singular\", \"test_results_description\": \"Got 1 result, configured to fail if != 0\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"owners\": \"[]\", \"model_owner\": \"[]\", \"tags\": \"[]\", \"test_tags\": \"[]\", \"model_tags\": \"[]\", \"meta\": \"{}\", \"model_meta\": \"{}\", \"test_results_query\": \"-- tests/check_record_count.sql\\n\\nwith actual_count as (\\n    select\\n        count(*) as actual_count\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n),\\nexpected_count as (\\n    select 300 as expected_count\\n)\\n\\nselect\\n    actual_count,\\n    expected_count\\nfrom actual_count, expected_count\\nwhere actual_count != expected_count\", \"other\": null, \"test_name\": \"test4_dbt_test\", \"test_params\": \"{}\", \"severity\": \"ERROR\", \"status\": \"fail\", \"execution_time\": null, \"days_diff\": 0, \"invocations_rank_index\": 1, \"failures\": 1, \"result_rows\": null, \"sample_data\": [{\"actual_count\": 583, \"expected_count\": 300}]}]", "name": "JinjaLogInfo", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.376659Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.395160Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.049729, "process_in_blocks": "0", "process_kernel_time": 0.467159, "process_mem_max_rss": "128417792", "process_out_blocks": "0", "process_user_time": 3.304559}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.049729, \"process_user_time\": 3.304559, \"process_kernel_time\": 0.467159, \"process_mem_max_rss\": \"128417792\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.407095Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:21.407931Z", "elapsed": 2.050756, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:21.407931 after 2.05 seconds", "name": "CommandCompleted", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.408068Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.408669Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ec3e380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120464400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121459180>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ec3e380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x120464400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x121459180>]}", "name": "SendingEvent", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.409233Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "667e8c42-dbee-4343-98e0-1a66cad1082a", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49373, "thread": "MainThread", "ts": "2024-08-19T02:24:21.409820Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1100a6410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1117ed870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1117edf30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1100a6410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1117ed870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1117edf30>]}", "name": "SendingEvent", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:24.648852Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:24.655435Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'debug': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_source_freshness_results\", \"macro_args\": {\"days_back\": 7, \"invocations_per_test\": 720}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:24.656249Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1101337f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1101337f0>]}", "name": "SendingEvent", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:24.868845Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111ccfe50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111ccfe50>]}", "name": "SendingEvent", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:24.936633Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:24.937897Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:24.971139Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.368520Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.369181Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112970ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112970ee0>]}", "name": "SendingEvent", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.500843Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1128db5b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1128db5b0>]}", "name": "SendingEvent", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.715247Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.716043Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112929270>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'b5d7a65b-bf5b-427c-847f-4552cb89d78d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112929270>]}", "name": "SendingEvent", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.716588Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.717298Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.717838Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.718445Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.718961Z"}}
{"data": {"elapsed": 0.089269586, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "SQL status: BEGIN in 0.089 seconds", "name": "SQLQueryStatus", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.808318Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.809038Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.809569Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.810101Z"}}
{"data": {"elapsed": 0.000982341, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.811646Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.934400Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.935183Z"}}
{"data": {"elapsed": 0.002241151, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.938351Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.939002Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_source_freshness_results'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.939553Z"}}
{"data": {"elapsed": 0.010170825, "status": "SELECT 17"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "SQL status: SELECT 17 in 0.010 seconds", "name": "SQLQueryStatus", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.950559Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.960046Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_sources'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.960728Z"}}
{"data": {"elapsed": 0.004593187, "status": "SELECT 22"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "SQL status: SELECT 22 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:25.965944Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.001568Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"demo_0819\".\"public\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"demo_0819\".\"public\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with dbt_source_freshness_results as (\n            select\n                *,\n                \n    case\n        when status = 'error' then 'fail'\n        when status = 'runtime error' then 'error'\n        else status\n    end as normalized_status\n,\n                rank() over (partition by unique_id order by generated_at desc) as invocations_rank_index\n            from \"demo_0819\".\"public\".\"dbt_source_freshness_results\"\n            \n                where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n            \n        ),\n\n        dbt_sources as (\n            select * from \"demo_0819\".\"public\".\"dbt_sources\"\n        )\n\n        select\n            freshness.source_freshness_execution_id,\n            freshness.unique_id,\n            freshness.max_loaded_at,\n            freshness.generated_at,\n            freshness.status as original_status,\n            freshness.normalized_status,\n            \n            \n                freshness.error_after,\n                freshness.warn_after,\n                freshness.filter,\n            \n            freshness.max_loaded_at_time_ago_in_s,\n            freshness.snapshotted_at,\n            freshness.invocation_id,\n            freshness.error,\n            freshness.invocations_rank_index,\n            sources.database_name,\n            sources.schema_name,\n            sources.source_name,\n            sources.name as table_name,\n            sources.loaded_at_field,\n            sources.meta,\n            sources.tags,\n            sources.owner as owners,\n            sources.freshness_error_after as source_freshness_error_after,\n            sources.freshness_warn_after as source_freshness_warn_after,\n            sources.freshness_filter as source_freshness_filter,\n            sources.relation_name,\n            \n            \n                sources.freshness_description\n            \n        from dbt_source_freshness_results freshness\n        join dbt_sources sources on freshness.unique_id = sources.unique_id\n        where invocations_rank_index <= 720\n        order by freshness.unique_id, invocations_rank_index desc\n    \n  ", "name": "SQLQuery", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.002321Z"}}
{"data": {"elapsed": 0.003590546, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "SQL status: SELECT 0 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.006612Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.014443Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.015159Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.016927Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.456907, "process_in_blocks": "0", "process_kernel_time": 0.385822, "process_mem_max_rss": "124162048", "process_out_blocks": "0", "process_user_time": 2.784913}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.456907, \"process_user_time\": 2.784913, \"process_kernel_time\": 0.385822, \"process_mem_max_rss\": \"124162048\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.026620Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:26.027374Z", "elapsed": 1.4578342, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:26.027374 after 1.46 seconds", "name": "CommandCompleted", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.027506Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.028119Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1100a6410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1111efca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111ccd7b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1100a6410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1111efca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x111ccd7b0>]}", "name": "SendingEvent", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.028721Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "b5d7a65b-bf5b-427c-847f-4552cb89d78d", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49378, "thread": "MainThread", "ts": "2024-08-19T02:24:26.029367Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165ea380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117cdd7e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117cddea0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165ea380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117cdd7e0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117cddea0>]}", "name": "SendingEvent", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:28.965593Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:28.973477Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'log_format': 'json', 'introspect': 'True', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:28.974373Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1166770a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1166770a0>]}", "name": "SendingEvent", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.190869Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1177904f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1177904f0>]}", "name": "SendingEvent", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.255747Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.257055Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.287389Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.622209Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.622842Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118df0e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118df0e50>]}", "name": "SendingEvent", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.754138Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118d5d5a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118d5d5a0>]}", "name": "SendingEvent", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.977175Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.977983Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118da9120>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118da9120>]}", "name": "SendingEvent", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.978632Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.979368Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.979969Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.980610Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:29.981148Z"}}
{"data": {"elapsed": 0.030992823, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "SQL status: BEGIN in 0.031 seconds", "name": "SQLQueryStatus", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.012202Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.012908Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.013439Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.013951Z"}}
{"data": {"elapsed": 0.000809108, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.015293Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.034927Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.112918Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.113575Z"}}
{"data": {"elapsed": 0.002434522, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.116571Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.117211Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.117868Z"}}
{"data": {"elapsed": 0.004407019, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "SQL status: SELECT 51 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.123037Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, test_result_rows, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metadata, alerts_dbt_source_freshness, stg_payments, stg_signups, test_practice, stg_customers, stg_orders, test_volume, dbt_artifacts_hashes, metrics_anomaly_score, monitors_runs, job_run_results, alerts_anomaly_detection, model_run_results, snapshot_run_results, customers, alerts_dbt_tests, returned_orders, alerts_schema_changes, test4_column_anomaly, orders, test4_volume_anomaly, test4schema, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.133568Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.155610Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_models'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.156271Z"}}
{"data": {"elapsed": 0.008025479, "status": "SELECT 19"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "SQL status: SELECT 19 in 0.008 seconds", "name": "SQLQueryStatus", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.164900Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.174703Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"demo_0819\".\"public\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_models as (\n                select\n                  name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  case when alias is not null then alias\n                  else name end as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  materialization,\n                  \n                  \n                    patch_path,\n                  \n                  original_path as full_path\n                from \"demo_0819\".\"public\".\"dbt_models\"\n                \n                  where package_name != 'elementary'\n                \n              )\n\n             select * from dbt_artifacts_models\n        \n  ", "name": "SQLQuery", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.175364Z"}}
{"data": {"elapsed": 0.002571825, "status": "SELECT 12"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "SQL status: SELECT 12 in 0.003 seconds", "name": "SQLQueryStatus", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.178533Z"}}
{"data": {"msg": "Elementary: [{\"name\": \"returned_orders\", \"unique_id\": \"model.elementary_tutorial.returned_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table contains all of the returned orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/returned_orders.sql\"}, {\"name\": \"test4_volume_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_volume_anomaly.sql\"}, {\"name\": \"customers\", \"unique_id\": \"model.elementary_tutorial.customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/customers.sql\"}, {\"name\": \"orders\", \"unique_id\": \"model.elementary_tutorial.orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about orders, as well as some derived facts based on payments\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/orders.sql\"}, {\"name\": \"test4_column_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_column_anomaly.sql\"}, {\"name\": \"stg_customers\", \"unique_id\": \"model.elementary_tutorial.stg_customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_customers\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_customers.sql\"}, {\"name\": \"test_practice\", \"unique_id\": \"model.elementary_tutorial.test_practice\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_practice.sql\"}, {\"name\": \"stg_payments\", \"unique_id\": \"model.elementary_tutorial.stg_payments\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_payments\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_payments.sql\"}, {\"name\": \"stg_orders\", \"unique_id\": \"model.elementary_tutorial.stg_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_orders\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_orders.sql\"}, {\"name\": \"stg_signups\", \"unique_id\": \"model.elementary_tutorial.stg_signups\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_signups\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_signups.sql\"}, {\"name\": \"test_volume\", \"unique_id\": \"model.elementary_tutorial.test_volume\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_volume\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_volume.sql\"}, {\"name\": \"test4schema\", \"unique_id\": \"model.elementary_tutorial.test4schema\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4schema.sql\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "info", "msg": "Elementary: [{\"name\": \"returned_orders\", \"unique_id\": \"model.elementary_tutorial.returned_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"returned_orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table contains all of the returned orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/returned_orders.sql\"}, {\"name\": \"test4_volume_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_volume_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_volume_anomaly.sql\"}, {\"name\": \"customers\", \"unique_id\": \"model.elementary_tutorial.customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"customers\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/customers.sql\"}, {\"name\": \"orders\", \"unique_id\": \"model.elementary_tutorial.orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"orders\", \"owners\": \"[]\", \"tags\": \"[\\\"finance\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about orders, as well as some derived facts based on payments\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/orders.sql\"}, {\"name\": \"test4_column_anomaly\", \"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4_column_anomaly\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4_column_anomaly.sql\"}, {\"name\": \"stg_customers\", \"unique_id\": \"model.elementary_tutorial.stg_customers\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_customers\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_customers.sql\"}, {\"name\": \"test_practice\", \"unique_id\": \"model.elementary_tutorial.test_practice\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_practice\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_practice.sql\"}, {\"name\": \"stg_payments\", \"unique_id\": \"model.elementary_tutorial.stg_payments\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_payments\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_payments.sql\"}, {\"name\": \"stg_orders\", \"unique_id\": \"model.elementary_tutorial.stg_orders\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_orders\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_orders.sql\"}, {\"name\": \"stg_signups\", \"unique_id\": \"model.elementary_tutorial.stg_signups\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"stg_signups\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/stg_signups.sql\"}, {\"name\": \"test_volume\", \"unique_id\": \"model.elementary_tutorial.test_volume\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test_volume\", \"owners\": \"[]\", \"tags\": \"[]\", \"package_name\": \"elementary_tutorial\", \"description\": \"\", \"materialization\": \"view\", \"patch_path\": null, \"full_path\": \"models/staging/test_volume.sql\"}, {\"name\": \"test4schema\", \"unique_id\": \"model.elementary_tutorial.test4schema\", \"database_name\": \"demo_0819\", \"schema_name\": \"public\", \"table_name\": \"test4schema\", \"owners\": \"[]\", \"tags\": \"[\\\"PII\\\"]\", \"package_name\": \"elementary_tutorial\", \"description\": \"This table has basic information about a customer, as well as some derived facts based on a customer's orders\", \"materialization\": \"view\", \"patch_path\": \"elementary_tutorial://models/schema.yml\", \"full_path\": \"models/test4schema.sql\"}]", "name": "JinjaLogInfo", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.188339Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.189308Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.191908Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3185687, "process_in_blocks": "0", "process_kernel_time": 0.371639, "process_mem_max_rss": "123797504", "process_out_blocks": "0", "process_user_time": 2.710351}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3185687, \"process_user_time\": 2.710351, \"process_kernel_time\": 0.371639, \"process_mem_max_rss\": \"123797504\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.202190Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:30.202954Z", "elapsed": 1.3195107, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:30.202954 after 1.32 seconds", "name": "CommandCompleted", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.203080Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.203758Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165ea380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118154400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118da9180>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1165ea380>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118154400>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118da9180>]}", "name": "SendingEvent", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.204367Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "0d777d35-c47c-4ec2-8dbd-5c7fe3c3bd10", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49382, "thread": "MainThread", "ts": "2024-08-19T02:24:30.204962Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d882410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115109870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115109f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d882410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115109870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115109f30>]}", "name": "SendingEvent", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:33.468279Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:33.475636Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'debug': 'False', 'version_check': 'True', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'fail_fast': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_sources\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:33.476563Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d90f7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d90f7f0>]}", "name": "SendingEvent", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:33.724120Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154e7e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154e7e50>]}", "name": "SendingEvent", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:33.819233Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:33.820801Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:33.858891Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.228325Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.229046Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116188ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116188ee0>]}", "name": "SendingEvent", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.422768Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1160f35b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1160f35b0>]}", "name": "SendingEvent", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.786197Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.787396Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11613d270>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '419cbf89-1c59-4980-ae7f-4f8b647816ce', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11613d270>]}", "name": "SendingEvent", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.788341Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.789557Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.790545Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.791432Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.792297Z"}}
{"data": {"elapsed": 0.044155378, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "SQL status: BEGIN in 0.044 seconds", "name": "SQLQueryStatus", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.836537Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.837631Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.838459Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.839300Z"}}
{"data": {"elapsed": 0.0012722381, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.841504Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.864285Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.958652Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.959518Z"}}
{"data": {"elapsed": 0.001808903, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.962236Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.963034Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.963633Z"}}
{"data": {"elapsed": 0.006055043, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "SQL status: SELECT 51 in 0.006 seconds", "name": "SQLQueryStatus", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.970340Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, test_result_rows, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metadata, alerts_dbt_source_freshness, stg_payments, stg_signups, test_practice, stg_customers, stg_orders, test_volume, dbt_artifacts_hashes, metrics_anomaly_score, monitors_runs, job_run_results, alerts_anomaly_detection, model_run_results, snapshot_run_results, customers, alerts_dbt_tests, returned_orders, alerts_schema_changes, test4_column_anomaly, orders, test4_volume_anomaly, test4schema, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.982640Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.991013Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"demo_0819\".\"public\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_artifacts_sources as (\n                select\n                  name,\n                  source_name,\n                  unique_id,\n                  database_name,\n                  schema_name,\n                  identifier as table_name,\n                  owner as owners,\n                  tags,\n                  package_name,\n                  description,\n                  original_path as full_path\n                from \"demo_0819\".\"public\".\"dbt_sources\"\n              )\n\n            select * from dbt_artifacts_sources\n        \n  ", "name": "SQLQuery", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.991817Z"}}
{"data": {"elapsed": 0.002285995, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "SQL status: SELECT 0 in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:34.994920Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.004858Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.005634Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.008110Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.6345029, "process_in_blocks": "0", "process_kernel_time": 0.440068, "process_mem_max_rss": "124678144", "process_out_blocks": "0", "process_user_time": 3.02165}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.6345029, \"process_user_time\": 3.02165, \"process_kernel_time\": 0.440068, \"process_mem_max_rss\": \"124678144\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.019821Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:35.020718Z", "elapsed": 1.6356649, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:35.020718 after 1.64 seconds", "name": "CommandCompleted", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.020854Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.021497Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d882410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e973ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154e57b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10d882410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10e973ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154e57b0>]}", "name": "SendingEvent", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.022072Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "419cbf89-1c59-4980-ae7f-4f8b647816ce", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49391, "thread": "MainThread", "ts": "2024-08-19T02:24:35.022943Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1182d6320>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bb557b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bb55e70>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1182d6320>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bb557b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11bb55e70>]}", "name": "SendingEvent", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:39.242867Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:39.250773Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'debug': 'False', 'fail_fast': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'version_check': 'True', 'warn_error': 'None', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'log_format': 'json', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_exposures\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'target_path': 'None', 'introspect': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:39.252277Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11836b940>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11836b940>]}", "name": "SendingEvent", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:39.508117Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1198187c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1198187c0>]}", "name": "SendingEvent", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:39.581450Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:39.582792Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:39.616667Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.090745Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.091445Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cc2cdf0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cc2cdf0>]}", "name": "SendingEvent", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.230677Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cb906a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cb906a0>]}", "name": "SendingEvent", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.451385Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.452159Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cbe10c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '4eb7291e-f0cb-4c6b-9589-739e8738920d', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cbe10c0>]}", "name": "SendingEvent", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.452693Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.453398Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.453934Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.454443Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.454941Z"}}
{"data": {"elapsed": 0.03119472, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: BEGIN in 0.031 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.486201Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.486904Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.487437Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.487956Z"}}
{"data": {"elapsed": 0.000948339, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.489446Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.512061Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.590038Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.590694Z"}}
{"data": {"elapsed": 0.002085522, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.593431Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.594309Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.594919Z"}}
{"data": {"elapsed": 0.004532177, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: SELECT 51 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.600040Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, test_result_rows, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metadata, alerts_dbt_source_freshness, stg_payments, stg_signups, test_practice, stg_customers, stg_orders, test_volume, dbt_artifacts_hashes, metrics_anomaly_score, monitors_runs, job_run_results, alerts_anomaly_detection, model_run_results, snapshot_run_results, customers, alerts_dbt_tests, returned_orders, alerts_schema_changes, test4_column_anomaly, orders, test4_volume_anomaly, test4schema, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.610915Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.632752Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.633447Z"}}
{"data": {"elapsed": 0.008569089, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: SELECT 20 in 0.009 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.642654Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.650958Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.651630Z"}}
{"data": {"elapsed": 0.004092564, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: SELECT 20 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.656378Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.662637Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_exposures'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.663302Z"}}
{"data": {"elapsed": 0.005041041, "status": "SELECT 20"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: SELECT 20 in 0.005 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.668973Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.677054Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  depends_on_nodes,\n                  \n                    depends_on_columns\n                  \n\n                from \"demo_0819\".\"public\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n              with dbt_artifacts_exposures as (\n                select\n                  name,\n                  \n                    label,\n                  \n                  unique_id,\n                  url,\n                  type,\n                  maturity,\n                  owner_email,\n                  owner_name as owners,\n                  tags,\n                  package_name,\n                  description,\n                  meta,\n                  original_path as full_path,\n                  \n                    raw_queries,\n                  \n                  depends_on_nodes,\n                  \n                    depends_on_columns\n                  \n\n                from \"demo_0819\".\"public\".\"dbt_exposures\"\n              )\n\n             select * from dbt_artifacts_exposures\n        \n  ", "name": "SQLQuery", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.677729Z"}}
{"data": {"elapsed": 0.0017487791, "status": "SELECT 0"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "SQL status: SELECT 0 in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.680109Z"}}
{"data": {"msg": "Elementary: []"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "info", "msg": "Elementary: []", "name": "JinjaLogInfo", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.688230Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.688966Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.691270Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.5443635, "process_in_blocks": "0", "process_kernel_time": 0.495046, "process_mem_max_rss": "124313600", "process_out_blocks": "0", "process_user_time": 3.202786}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.5443635, \"process_user_time\": 3.202786, \"process_kernel_time\": 0.495046, \"process_mem_max_rss\": \"124313600\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.701988Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:40.702777Z", "elapsed": 1.5453404, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:40.702777 after 1.55 seconds", "name": "CommandCompleted", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.702902Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.703528Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1182d6320>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11940f670>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cbe18d0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1182d6320>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11940f670>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cbe18d0>]}", "name": "SendingEvent", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.704079Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "4eb7291e-f0cb-4c6b-9589-739e8738920d", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49396, "thread": "MainThread", "ts": "2024-08-19T02:24:40.704651Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116fae410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118649870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118649f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116fae410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118649870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118649f30>]}", "name": "SendingEvent", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:43.820828Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:43.827617Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_singular_tests\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'fail_fast': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'introspect': 'True', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_singular_tests\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:43.828511Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11703b7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11703b7f0>]}", "name": "SendingEvent", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.049151Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118b0fe50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118b0fe50>]}", "name": "SendingEvent", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.114867Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.116015Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.147821Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.490375Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.491056Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d898ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d898ee0>]}", "name": "SendingEvent", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.624253Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d7ff5b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d7ff5b0>]}", "name": "SendingEvent", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.840844Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.841733Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d849270>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'fe558b36-1750-4eac-b6f0-f3b36619c830', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11d849270>]}", "name": "SendingEvent", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.842273Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.843014Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.843557Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.844061Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.844556Z"}}
{"data": {"elapsed": 0.031298988, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "SQL status: BEGIN in 0.031 seconds", "name": "SQLQueryStatus", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.875934Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.876658Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.877193Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.877735Z"}}
{"data": {"elapsed": 0.001089085, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.879420Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.970514Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n          unique_id,\n          name,\n          original_path,\n          package_name,\n          tags\n        from \"demo_0819\".\"public\".\"dbt_tests\"\n        where type = 'singular'\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n          unique_id,\n          name,\n          original_path,\n          package_name,\n          tags\n        from \"demo_0819\".\"public\".\"dbt_tests\"\n        where type = 'singular'\n    \n  ", "name": "SQLQuery", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.971210Z"}}
{"data": {"elapsed": 0.002559682, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "SQL status: SELECT 1 in 0.003 seconds", "name": "SQLQueryStatus", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.974386Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"name\": \"test4_dbt_test\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"tags\": \"[]\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "info", "msg": "Elementary: [{\"unique_id\": \"test.elementary_tutorial.test4_dbt_test\", \"name\": \"test4_dbt_test\", \"original_path\": \"tests/test4_dbt_test.sql\", \"package_name\": \"elementary_tutorial\", \"tags\": \"[]\"}]", "name": "JinjaLogInfo", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.981889Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.982610Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.2512623, "process_in_blocks": "0", "process_kernel_time": 0.36989, "process_mem_max_rss": "122691584", "process_out_blocks": "0", "process_user_time": 2.655093}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.2512623, \"process_user_time\": 2.655093, \"process_kernel_time\": 0.36989, \"process_mem_max_rss\": \"122691584\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.994012Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:44.994773Z", "elapsed": 1.2522326, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:44.994773 after 1.25 seconds", "name": "CommandCompleted", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.994913Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.995492Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116fae410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11809fca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118b0d7b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116fae410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11809fca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x118b0d7b0>]}", "name": "SendingEvent", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.996062Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "fe558b36-1750-4eac-b6f0-f3b36619c830", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49401, "thread": "MainThread", "ts": "2024-08-19T02:24:44.996725Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113e1a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154f5840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154f5f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113e1a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154f5840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1154f5f00>]}", "name": "SendingEvent", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:47.992542Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:47.999987Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'version_check': 'True', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'log_format': 'json', 'static_parser': 'True', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_runs\", \"macro_args\": {\"days_back\": 7, \"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.000829Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113ea7790>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113ea7790>]}", "name": "SendingEvent", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.210868Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114f78af0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114f78af0>]}", "name": "SendingEvent", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.279204Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.280743Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.313190Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.669946Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.670595Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11654ce80>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11654ce80>]}", "name": "SendingEvent", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:48.808327Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164c1600>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1164c1600>]}", "name": "SendingEvent", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.195524Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.196383Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116509060>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '5333af8e-4d8a-4dd3-aa09-54ec9ce52b08', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116509060>]}", "name": "SendingEvent", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.197089Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.198323Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.200366Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.201493Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.202434Z"}}
{"data": {"elapsed": 0.035707552, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "SQL status: BEGIN in 0.036 seconds", "name": "SQLQueryStatus", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.238145Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.238894Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.240048Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.240667Z"}}
{"data": {"elapsed": 0.0013041049, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.242616Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.377638Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"demo_0819\".\"public\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        with model_runs as (\n            select * from \"demo_0819\".\"public\".\"model_run_results\"\n        )\n\n        select\n            unique_id, \n            invocation_id,\n            name,\n            schema_name as schema,\n            status,\n            case\n                when status != 'success' then 0\n                else round(cast(execution_time as numeric(28,6)), 1)\n            end as execution_time,\n            full_refresh,\n            materialization,\n            compiled_code,\n            generated_at\n        from model_runs\n        where \n        ((\n    current_timestamp::timestamp\n)::date - (cast(generated_at as timestamp))::date)\n     < 7\n        \n          and unique_id not like 'model.elementary.%'\n        \n        order by generated_at\n    \n  ", "name": "SQLQuery", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.378405Z"}}
{"data": {"elapsed": 0.006394186, "status": "SELECT 24"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "SQL status: SELECT 24 in 0.006 seconds", "name": "SQLQueryStatus", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.385868Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    age\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"49e61e13-d6a0-4837-a9b4-1b2f6b130d84\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:17:36\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"customers_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as customer_id,\\n        first_name,\\n        last_name\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"orders_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"orders_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as order_id,\\n        user_id as customer_id,\\n        order_date,\\n        status\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_payments\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"payments_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"payments_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as payment_id,\\n        order_id,\\n        payment_method,\\n\\n        -- `amount` is currently stored in cents, so we convert it to dollars\\n        amount / 100 as amount\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"stg_signups\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"signups_validation\\\"\\n\\n\\n    with source as (\\n        select * from \\\"demo_0819\\\".\\\"public\\\".\\\"signups_training\\\"\\n    ),\\n\\n\\nrenamed as (\\n\\n    select\\n        id as signup_id,\\n        user_id as customer_id,\\n        user_email as customer_email,\\n        hashed_password,\\n        signup_date\\n\\n    from source\\n\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test_practice\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"customers_validation\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_training\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test_volume\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.2, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"-- depends_on: \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n\\nwith source as (\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_dataset\\\"\\n),\\n\\nrenamed as (\\n    select\\n    *\\n    from source\\n)\\n\\nselect * from renamed\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\norder_payments as (\\n\\n    select\\n        order_id,\\n\\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    group by order_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        orders.order_id,\\n        orders.customer_id,\\n        orders.order_date,\\n        orders.status,\\n\\n        order_payments.credit_card_amount,\\n\\n        order_payments.coupon_amount,\\n\\n        order_payments.bank_transfer_amount,\\n\\n        order_payments.gift_card_amount,\\n\\n        order_payments.total_amount as amount\\n\\n    from orders\\n\\n\\n    left join order_payments\\n        on orders.order_id = order_payments.order_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"customers\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with customers as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_customers\\\"\\n\\n),\\n\\norders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_orders\\\"\\n\\n),\\n\\npayments as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_payments\\\"\\n\\n),\\n\\nsignups as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"stg_signups\\\"\\n),\\n\\ncustomer_orders as (\\n\\n        select\\n        customer_id,\\n\\n        min(order_date) as first_order,\\n        max(order_date) as most_recent_order,\\n        count(order_id) as number_of_orders\\n    from orders\\n\\n    group by customer_id\\n\\n),\\n\\ncustomer_payments as (\\n\\n    select\\n        orders.customer_id,\\n        sum(amount) as total_amount\\n\\n    from payments\\n\\n    left join orders on\\n         payments.order_id = orders.order_id\\n\\n    group by orders.customer_id\\n\\n),\\n\\nfinal as (\\n\\n    select\\n        customers.customer_id,\\n        customers.first_name,\\n        customers.last_name,\\n        customer_orders.first_order,\\n        customer_orders.most_recent_order,\\n        case\\n            when customer_orders.number_of_orders is null then 0\\n            else customer_orders.number_of_orders\\n        end as number_of_orders,\\n        customer_payments.total_amount as customer_lifetime_value,\\n        signups.customer_email,\\n        \\n        signups.signup_date\\n\\n    from customers\\n\\n    left join customer_orders\\n        on customers.customer_id = customer_orders.customer_id\\n\\n    left join customer_payments\\n        on  customers.customer_id = customer_payments.customer_id\\n\\n    left join signups\\n        on customers.customer_id = signups.customer_id\\n\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test4_column_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_practice\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test4_volume_anomaly\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test_volume\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    *\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"returned_orders\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"\\n\\nwith orders as (\\n    select *\\n    from \\\"demo_0819\\\".\\\"public\\\".\\\"orders\\\"\\n)\\n\\nselect *\\nfrom orders\\nwhere status = 'return_pending' or status = 'returned'\", \"generated_at\": \"2024-08-19 02:23:10\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"name\": \"test4schema\", \"schema\": \"public\", \"status\": \"success\", \"execution_time\": 0.1, \"full_refresh\": false, \"materialization\": \"view\", \"compiled_code\": \"with orders as (\\n\\n    select * from \\\"demo_0819\\\".\\\"public\\\".\\\"test4_column_anomaly\\\"\\n\\n),\\n\\nfinal as (\\n\\n    select\\n    age\\n    from orders\\n)\\n\\nselect * from final\", \"generated_at\": \"2024-08-19 02:23:10\"}]", "name": "JinjaLogInfo", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.404315Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.406428Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.5073985, "process_in_blocks": "0", "process_kernel_time": 0.406151, "process_mem_max_rss": "124235776", "process_out_blocks": "0", "process_user_time": 2.885539}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.5073985, \"process_user_time\": 2.885539, \"process_kernel_time\": 0.406151, \"process_mem_max_rss\": \"124235776\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.418438Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:49.419273Z", "elapsed": 1.5084127, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:49.419273 after 1.51 seconds", "name": "CommandCompleted", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.419426Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.420267Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113e1a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1158d5ae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116509c30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x113e1a3b0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1158d5ae0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116509c30>]}", "name": "SendingEvent", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.421157Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "5333af8e-4d8a-4dd3-aa09-54ec9ce52b08", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49405, "thread": "MainThread", "ts": "2024-08-19T02:24:49.421939Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1129da440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e4318d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e431f90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1129da440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e4318d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e431f90>]}", "name": "SendingEvent", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:53.277564Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:53.287542Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'write_json': 'True', 'log_cache_events': 'False', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'debug': 'False', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'static_parser': 'True', 'introspect': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_dbt_models_test_coverage\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'target_path': 'None', 'log_format': 'json', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:53.288668Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112a6a380>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x112a6a380>]}", "name": "SendingEvent", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:53.667375Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e2af190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e2af190>]}", "name": "SendingEvent", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:53.802325Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:53.804423Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:53.865312Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.528308Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.529175Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f504f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f504f10>]}", "name": "SendingEvent", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.684479Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f4bdb40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f4bdb40>]}", "name": "SendingEvent", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.985701Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.986543Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f4874c0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '16dd0457-2704-465f-913f-aaa7e05c1bfe', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f4874c0>]}", "name": "SendingEvent", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.987153Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.987926Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.988523Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.989223Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:54.989955Z"}}
{"data": {"elapsed": 0.044576973, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "SQL status: BEGIN in 0.045 seconds", "name": "SQLQueryStatus", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.034589Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.035327Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.035855Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.036373Z"}}
{"data": {"elapsed": 0.000934618, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.037850Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.059442Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.142851Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.143850Z"}}
{"data": {"elapsed": 0.001962684, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.147151Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.148528Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.151044Z"}}
{"data": {"elapsed": 0.006256879, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "SQL status: SELECT 51 in 0.006 seconds", "name": "SQLQueryStatus", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.158511Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, test_result_rows, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metadata, alerts_dbt_source_freshness, stg_payments, stg_signups, test_practice, stg_customers, stg_orders, test_volume, dbt_artifacts_hashes, metrics_anomaly_score, monitors_runs, job_run_results, alerts_anomaly_detection, model_run_results, snapshot_run_results, customers, alerts_dbt_tests, returned_orders, alerts_schema_changes, test4_column_anomaly, orders, test4_volume_anomaly, test4schema, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.176296Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.186795Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"demo_0819\".\"public\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n            with dbt_tests as (\n                select\n                    parent_model_unique_id,\n                    test_column_name\n                from \"demo_0819\".\"public\".\"dbt_tests\"\n            )\n\n            select \n                parent_model_unique_id as model_unique_id,\n                SUM(\n                    case \n                        when test_column_name is not null then 1\n                        else 0\n                        end\n                ) as column_tests,\n                 SUM(\n                    case\n                        when test_column_name is null then 1\n                        else 0\n                        end \n                )as table_tests\n            from dbt_tests\n            group by parent_model_unique_id\n        \n  ", "name": "SQLQuery", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.187909Z"}}
{"data": {"elapsed": 0.002395226, "status": "SELECT 7"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "SQL status: SELECT 7 in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.191038Z"}}
{"data": {"msg": "Elementary: [{\"model_unique_id\": \"model.elementary_tutorial.customers\", \"column_tests\": 1, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"column_tests\": 2, \"table_tests\": 0}, {\"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"column_tests\": 0, \"table_tests\": 1}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "info", "msg": "Elementary: [{\"model_unique_id\": \"model.elementary_tutorial.customers\", \"column_tests\": 1, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.returned_orders\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"column_tests\": 2, \"table_tests\": 0}, {\"model_unique_id\": \"model.elementary_tutorial.test4schema\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"column_tests\": 0, \"table_tests\": 1}, {\"model_unique_id\": \"model.elementary_tutorial.test_practice\", \"column_tests\": 0, \"table_tests\": 1}]", "name": "JinjaLogInfo", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.199928Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.200714Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.202467Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 2.041834, "process_in_blocks": "0", "process_kernel_time": 0.520636, "process_mem_max_rss": "122994688", "process_out_blocks": "0", "process_user_time": 3.184608}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 2.041834, \"process_user_time\": 3.184608, \"process_kernel_time\": 0.520636, \"process_mem_max_rss\": \"122994688\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.220521Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:24:55.221374Z", "elapsed": 2.0429683, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:24:55.221374 after 2.04 seconds", "name": "CommandCompleted", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.221513Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.222624Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1129da440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11de33d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e862800>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1129da440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11de33d60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e862800>]}", "name": "SendingEvent", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.224176Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "16dd0457-2704-465f-913f-aaa7e05c1bfe", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49416, "thread": "MainThread", "ts": "2024-08-19T02:24:55.226492Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cdfa440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e5498d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e549f90>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cdfa440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e5498d0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e549f90>]}", "name": "SendingEvent", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:24:59.411703Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:24:59.418761Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'fail_fast': 'False', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'no_print': 'None', 'quiet': 'False', 'empty': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'introspect': 'True', 'static_parser': 'True', 'log_format': 'json', 'target_path': 'None', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_nodes_depends_on_nodes\", \"macro_args\": {\"exclude_elementary\": true}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:24:59.419832Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce8a380>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ce8a380>]}", "name": "SendingEvent", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:24:59.640477Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e3cb190>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11e3cb190>]}", "name": "SendingEvent", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:24:59.718185Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:24:59.719674Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:24:59.754916Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.158386Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.159161Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f6a4f10>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f6a4f10>]}", "name": "SendingEvent", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.319843Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f661b40>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f661b40>]}", "name": "SendingEvent", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.557854Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.558681Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f10b2e0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '951ae6e6-3c26-4222-bedb-5d535d3999f1', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11f10b2e0>]}", "name": "SendingEvent", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.559363Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.560226Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.560878Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.561566Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.562339Z"}}
{"data": {"elapsed": 0.032244407, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "SQL status: BEGIN in 0.032 seconds", "name": "SQLQueryStatus", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.594620Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.595387Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.595938Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.596467Z"}}
{"data": {"elapsed": 0.0012670329, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.598284Z"}}
{"data": {"conn_name": "macro_log_macro_results", "database": "demo_0819", "schema": "public"}, "info": {"category": "", "code": "E013", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On \"macro_log_macro_results\": cache miss for schema \"demo_0819.public\", this is inefficient", "name": "CacheMiss", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.621818Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.698513Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.699377Z"}}
{"data": {"elapsed": 0.0022673141, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.702266Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.703349Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\nselect\n      'demo_0819' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike 'public'\n    union all\n    select\n      'demo_0819' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike 'public'\n  ", "name": "SQLQuery", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.704113Z"}}
{"data": {"elapsed": 0.004259545, "status": "SELECT 51"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "SQL status: SELECT 51 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.709099Z"}}
{"data": {"database": "demo_0819", "relations": [{"database": "demo_0819", "identifier": "dbt_exposures", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_seeds", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_training", "schema": "public"}, {"database": "demo_0819", "identifier": "elementary_test_results", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_dataset", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_invocations", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_snapshots", "schema": "public"}, {"database": "demo_0819", "identifier": "customers_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_training", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_source_freshness_results", "schema": "public"}, {"database": "demo_0819", "identifier": "schema_columns_snapshot", "schema": "public"}, {"database": "demo_0819", "identifier": "orders_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "test_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "data_monitoring_metrics", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_models", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_sources", "schema": "public"}, {"database": "demo_0819", "identifier": "test_result_rows", "schema": "public"}, {"database": "demo_0819", "identifier": "payments_validation", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_columns", "schema": "public"}, {"database": "demo_0819", "identifier": "signups_training", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "metadata", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_source_freshness", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_payments", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_signups", "schema": "public"}, {"database": "demo_0819", "identifier": "test_practice", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_customers", "schema": "public"}, {"database": "demo_0819", "identifier": "stg_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test_volume", "schema": "public"}, {"database": "demo_0819", "identifier": "dbt_artifacts_hashes", "schema": "public"}, {"database": "demo_0819", "identifier": "metrics_anomaly_score", "schema": "public"}, {"database": "demo_0819", "identifier": "monitors_runs", "schema": "public"}, {"database": "demo_0819", "identifier": "job_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_anomaly_detection", "schema": "public"}, {"database": "demo_0819", "identifier": "model_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "snapshot_run_results", "schema": "public"}, {"database": "demo_0819", "identifier": "customers", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_tests", "schema": "public"}, {"database": "demo_0819", "identifier": "returned_orders", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_schema_changes", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_column_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "orders", "schema": "public"}, {"database": "demo_0819", "identifier": "test4_volume_anomaly", "schema": "public"}, {"database": "demo_0819", "identifier": "test4schema", "schema": "public"}, {"database": "demo_0819", "identifier": "anomaly_threshold_sensitivity", "schema": "public"}, {"database": "demo_0819", "identifier": "alerts_dbt_models", "schema": "public"}], "schema": "public"}, "info": {"category": "", "code": "E014", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "While listing relations in database=demo_0819, schema=public, found: dbt_exposures, dbt_seeds, customers_training, elementary_test_results, signups_validation, test_dataset, dbt_invocations, dbt_snapshots, customers_validation, test_training, orders_training, dbt_metrics, dbt_source_freshness_results, schema_columns_snapshot, orders_validation, test_validation, data_monitoring_metrics, dbt_models, payments_training, dbt_sources, test_result_rows, payments_validation, dbt_columns, signups_training, dbt_run_results, dbt_tests, metadata, alerts_dbt_source_freshness, stg_payments, stg_signups, test_practice, stg_customers, stg_orders, test_volume, dbt_artifacts_hashes, metrics_anomaly_score, monitors_runs, job_run_results, alerts_anomaly_detection, model_run_results, snapshot_run_results, customers, alerts_dbt_tests, returned_orders, alerts_schema_changes, test4_column_anomaly, orders, test4_volume_anomaly, test4schema, anomaly_threshold_sensitivity, alerts_dbt_models", "name": "ListRelations", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.722552Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.730984Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"demo_0819\".\"public\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"demo_0819\".\"public\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"demo_0819\".\"public\".\"dbt_exposures\"\n    \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n        select\n            unique_id,\n            depends_on_nodes,\n            materialization,\n            'model' as type\n        from \"demo_0819\".\"public\".\"dbt_models\"\n        \n            where package_name != 'elementary'\n        \n        union all\n        select\n            unique_id,\n            null as depends_on_nodes,\n            null as materialization,\n            'source' as type\n        from \"demo_0819\".\"public\".\"dbt_sources\"\n        union all\n        select\n            unique_id,\n            depends_on_nodes,\n            null as materialization,\n            'exposure' as type\n        from \"demo_0819\".\"public\".\"dbt_exposures\"\n    \n  ", "name": "SQLQuery", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.731673Z"}}
{"data": {"elapsed": 0.002735594, "status": "SELECT 12"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "SQL status: SELECT 12 in 0.003 seconds", "name": "SQLQueryStatus", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.735065Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.orders\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_volume\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_customers\\\", \\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\", \\\"model.elementary_tutorial.stg_signups\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_practice\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_training\\\", \\\"seed.elementary_tutorial.customers_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_validation\\\", \\\"seed.elementary_tutorial.test_training\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.payments_training\\\", \\\"seed.elementary_tutorial.payments_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.orders_training\\\", \\\"seed.elementary_tutorial.orders_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.signups_training\\\", \\\"seed.elementary_tutorial.signups_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.test_dataset\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test4_column_anomaly\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.orders\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_volume\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_customers\\\", \\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\", \\\"model.elementary_tutorial.stg_signups\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.stg_orders\\\", \\\"model.elementary_tutorial.stg_payments\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test_practice\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_training\\\", \\\"seed.elementary_tutorial.customers_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.customers_validation\\\", \\\"seed.elementary_tutorial.test_training\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.payments_training\\\", \\\"seed.elementary_tutorial.payments_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.orders_training\\\", \\\"seed.elementary_tutorial.orders_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.signups_training\\\", \\\"seed.elementary_tutorial.signups_validation\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"depends_on_nodes\": \"[\\\"seed.elementary_tutorial.test_dataset\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"depends_on_nodes\": \"[\\\"model.elementary_tutorial.test4_column_anomaly\\\"]\", \"materialization\": \"view\", \"type\": \"model\"}]", "name": "JinjaLogInfo", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.745134Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.746044Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.747957Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.4377218, "process_in_blocks": "0", "process_kernel_time": 0.457271, "process_mem_max_rss": "123469824", "process_out_blocks": "0", "process_user_time": 2.918795}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.4377218, \"process_user_time\": 2.918795, \"process_kernel_time\": 0.457271, \"process_mem_max_rss\": \"123469824\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.760370Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:25:00.761354Z", "elapsed": 1.4389316, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:25:00.761354 after 1.44 seconds", "name": "CommandCompleted", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.761499Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.762117Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cdfa440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11df4bd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ea2e800>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11cdfa440>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11df4bd60>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11ea2e800>]}", "name": "SendingEvent", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.762688Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "951ae6e6-3c26-4222-bedb-5d535d3999f1", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49424, "thread": "MainThread", "ts": "2024-08-19T02:25:00.763300Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114812410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115f45840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115f45f00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114812410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115f45840>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115f45f00>]}", "name": "SendingEvent", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.006498Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.013995Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'fail_fast': 'False', 'warn_error': 'None', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'version_check': 'True', 'debug': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocation\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'log_format': 'json', 'target_path': 'None', 'static_parser': 'True', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.014792Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11596f0a0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11596f0a0>]}", "name": "SendingEvent", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.300531Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11596fd00>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x11596fd00>]}", "name": "SendingEvent", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.377853Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.379461Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.413456Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.803663Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.804424Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117070eb0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117070eb0>]}", "name": "SendingEvent", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:04.959791Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116fd88b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116fd88b0>]}", "name": "SendingEvent", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.198873Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.199833Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117029f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': 'e29348e0-1554-4558-8e23-7772bbf27939', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117029f30>]}", "name": "SendingEvent", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.200570Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.201510Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.202145Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.202681Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.203256Z"}}
{"data": {"elapsed": 0.05874741, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "SQL status: BEGIN in 0.059 seconds", "name": "SQLQueryStatus", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.262126Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.263100Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.263666Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.264189Z"}}
{"data": {"elapsed": 0.0009844641, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.265700Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.366402Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"demo_0819\".\"public\".\"dbt_run_results\" run_results\n      join \"demo_0819\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"demo_0819\".\"public\".\"dbt_run_results\" run_results\n      join \"demo_0819\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_run_results as (\n      select *\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select unique_id, invocation_id from latest_run_results\n  \n  ", "name": "SQLQuery", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.367355Z"}}
{"data": {"elapsed": 0.007192897, "status": "SELECT 40"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "SQL status: SELECT 40 in 0.007 seconds", "name": "SQLQueryStatus", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.375442Z"}}
{"data": {"msg": "Elementary: [{\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "info", "msg": "Elementary: [{\"unique_id\": \"model.elementary.alerts_anomaly_detection\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_dbt_models\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_dbt_source_freshness\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_dbt_tests\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.alerts_schema_changes\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.anomaly_threshold_sensitivity\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.data_monitoring_metrics\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_artifacts_hashes\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_columns\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_exposures\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_invocations\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_metrics\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_models\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_seeds\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_snapshots\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_source_freshness_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_sources\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.dbt_tests\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.elementary_test_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.job_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.metadata\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.metrics_anomaly_score\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.model_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.monitors_runs\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.schema_columns_snapshot\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.snapshot_run_results\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary.test_result_rows\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.returned_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_customers\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_orders\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_payments\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.stg_signups\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test4_column_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test4schema\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test4_volume_anomaly\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test_practice\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}, {\"unique_id\": \"model.elementary_tutorial.test_volume\", \"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\"}]", "name": "JinjaLogInfo", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.389419Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.390998Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.485114, "process_in_blocks": "0", "process_kernel_time": 0.43389, "process_mem_max_rss": "123006976", "process_out_blocks": "0", "process_user_time": 2.909914}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.485114, \"process_user_time\": 2.909914, \"process_kernel_time\": 0.43389, \"process_mem_max_rss\": \"123006976\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.403586Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:25:05.404344Z", "elapsed": 1.4860508, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:25:05.404344 after 1.49 seconds", "name": "CommandCompleted", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.404471Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.405058Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114812410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115947ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117029c60>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x114812410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115947ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x117029c60>]}", "name": "SendingEvent", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.405609Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "e29348e0-1554-4558-8e23-7772bbf27939", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49429, "thread": "MainThread", "ts": "2024-08-19T02:25:05.406179Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10beb2410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115929870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115929f30>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'start', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10beb2410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115929870>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115929f30>]}", "name": "SendingEvent", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:09.842580Z"}}
{"data": {"log_version": 3, "version": "=1.8.3"}, "info": {"category": "", "code": "A001", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "info", "msg": "Running with dbt=1.8.3", "name": "MainReportVersion", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:09.849580Z"}}
{"data": {"args": {"cache_selected_only": "False", "debug": "False", "empty": "None", "fail_fast": "False", "indirect_selection": "eager", "introspect": "True", "invocation_command": "dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project", "log_cache_events": "False", "log_format": "json", "log_path": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target", "no_print": "None", "partial_parse": "True", "printer_width": "80", "profiles_dir": "/Users/cfh00892032/PythonProject/wu/elementary_tutorial", "quiet": "False", "send_anonymous_usage_stats": "True", "static_parser": "True", "target_path": "None", "use_colors": "True", "use_experimental_parser": "False", "version_check": "True", "warn_error": "None", "warn_error_options": "WarnErrorOptions(include=[], exclude=[])", "write_json": "True"}}, "info": {"category": "", "code": "A002", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "running dbt with arguments {'printer_width': '80', 'indirect_selection': 'eager', 'log_cache_events': 'False', 'write_json': 'True', 'partial_parse': 'True', 'cache_selected_only': 'False', 'warn_error': 'None', 'version_check': 'True', 'profiles_dir': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial', 'log_path': '/Users/cfh00892032/PythonProject/wu/elementary_tutorial/edr_target', 'debug': 'False', 'fail_fast': 'False', 'use_colors': 'True', 'use_experimental_parser': 'False', 'empty': 'None', 'quiet': 'False', 'no_print': 'None', 'log_format': 'json', 'static_parser': 'True', 'invocation_command': 'dbt --log-format json run-operation elementary.log_macro_results --args {\"macro_name\": \"elementary_cli.get_models_latest_invocations_data\", \"macro_args\": {}} --project-dir /Users/cfh00892032/PythonProject/wu/wuenv/lib/python3.10/site-packages/elementary/monitor/dbt_project', 'introspect': 'True', 'target_path': 'None', 'warn_error_options': 'WarnErrorOptions(include=[], exclude=[])', 'send_anonymous_usage_stats': 'True'}", "name": "MainReportArgs", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:09.850352Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'project_id', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10bf3f7f0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'project_id', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10bf3f7f0>]}", "name": "SendingEvent", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.073367Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'adapter_info', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115d07e50>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'adapter_info', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115d07e50>]}", "name": "SendingEvent", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.145296Z"}}
{"data": {"adapter_name": "postgres", "adapter_version": "=1.8.2"}, "info": {"category": "", "code": "E034", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "info", "msg": "Registered adapter: postgres=1.8.2", "name": "AdapterRegistered", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.146789Z"}}
{"data": {"checksum": "30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456", "profile": "", "target": "", "vars": "{}", "version": "1.8.3"}, "info": {"category": "", "code": "I025", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "checksum: 30bd4080c2bc8dee5936f8f60083ffbe1c906859d0fd965607c2144031479456, vars: {}, profile: , target: , version: 1.8.3", "name": "StateCheckVarsHash", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.180454Z"}}
{"data": {"added": 0, "changed": 0, "deleted": 0}, "info": {"category": "", "code": "I040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Partial parsing enabled: 0 files deleted, 0 files added, 0 files changed.", "name": "PartialParsingEnabled", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.539387Z"}}
{"data": {}, "info": {"category": "", "code": "I017", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Partial parsing enabled, no changes found, skipping parsing", "name": "PartialParsingSkipParsing", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.540072Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'load_project', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116988ee0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'load_project', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116988ee0>]}", "name": "SendingEvent", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.675845Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'resource_counts', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1168f75b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'resource_counts', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x1168f75b0>]}", "name": "SendingEvent", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.906419Z"}}
{"data": {"stat_line": "39 models, 2 operations, 6 data tests, 6 sources, 1380 macros"}, "info": {"category": "", "code": "W006", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "info", "msg": "Found 39 models, 2 operations, 6 data tests, 6 sources, 1380 macros", "name": "FoundStats", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.907311Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'runnable_timing', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116941270>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'runnable_timing', 'label': '3af00862-cfa1-48dc-870e-a5a44ecd54c7', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x116941270>]}", "name": "SendingEvent", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.907849Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E005", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Acquiring new postgres connection 'macro_log_macro_results'", "name": "NewConnection", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.908838Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.909770Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.910359Z"}}
{"data": {"connection_state": "init"}, "info": {"category": "", "code": "E037", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Opening a new connection, currently in state init", "name": "NewConnectionOpening", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.910904Z"}}
{"data": {"elapsed": 0.03500373, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "SQL status: BEGIN in 0.035 seconds", "name": "SQLQueryStatus", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.945989Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E018", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLCommit", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.946825Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.947383Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "COMMIT"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: COMMIT", "name": "SQLQuery", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.947965Z"}}
{"data": {"elapsed": 0.001415729, "status": "COMMIT"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "SQL status: COMMIT in 0.001 seconds", "name": "SQLQueryStatus", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:10.950200Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.063637Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "BEGIN"}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: BEGIN", "name": "SQLQuery", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.064317Z"}}
{"data": {"elapsed": 0.001812971, "status": "BEGIN"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "SQL status: BEGIN in 0.002 seconds", "name": "SQLQueryStatus", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.066694Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.067344Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from \"demo_0819\".INFORMATION_SCHEMA.columns\n      where table_name = 'dbt_invocations'\n        \n        and table_schema = 'public'\n        \n      order by ordinal_position\n\n  ", "name": "SQLQuery", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.067900Z"}}
{"data": {"elapsed": 0.009010141, "status": "SELECT 35"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "SQL status: SELECT 35 in 0.009 seconds", "name": "SQLQueryStatus", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.077525Z"}}
{"data": {"conn_name": "macro_log_macro_results", "conn_type": "postgres"}, "info": {"category": "", "code": "E015", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Using postgres connection \"macro_log_macro_results\"", "name": "ConnectionUsed", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.088368Z"}}
{"data": {"conn_name": "macro_log_macro_results", "sql": "/* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"demo_0819\".\"public\".\"dbt_run_results\" run_results\n      join \"demo_0819\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"demo_0819\".\"public\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  "}, "info": {"category": "", "code": "E016", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: /* {\"app\": \"dbt\", \"dbt_version\": \"1.8.3\", \"profile_name\": \"elementary\", \"target_name\": \"dev\", \"connection_name\": \"macro_log_macro_results\"} */\n\n    \n    with ordered_run_results as (\n      select\n        *,\n        row_number() over (partition by unique_id order by run_results.generated_at desc) as row_number\n      from \"demo_0819\".\"public\".\"dbt_run_results\" run_results\n      join \"demo_0819\".\"public\".\"dbt_models\" using (unique_id)\n    ),\n\n    latest_models_invocations as (\n      select distinct invocation_id\n      from ordered_run_results\n      where row_number = 1\n    )\n\n    select\n      invocation_id,\n      command,\n      selected,\n      full_refresh,\n      \n        job_url,\n      \n      job_name,\n      job_id,\n      orchestrator\n    from \"demo_0819\".\"public\".\"dbt_invocations\" invocations\n    join latest_models_invocations using (invocation_id)\n  \n  ", "name": "SQLQuery", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.089263Z"}}
{"data": {"elapsed": 0.004076505, "status": "SELECT 1"}, "info": {"category": "", "code": "E017", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "SQL status: SELECT 1 in 0.004 seconds", "name": "SQLQueryStatus", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.094257Z"}}
{"data": {"msg": "Elementary: [{\"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": null, \"job_name\": null, \"job_id\": null, \"orchestrator\": null}]"}, "info": {"category": "", "code": "I062", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "info", "msg": "Elementary: [{\"invocation_id\": \"b15f46e3-0e7f-450c-80ca-d64788f37dff\", \"command\": \"run\", \"selected\": \"[]\", \"full_refresh\": false, \"job_url\": null, \"job_name\": null, \"job_id\": null, \"orchestrator\": null}]", "name": "JinjaLogInfo", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.102266Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E012", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: ROLLBACK", "name": "Rollback", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.103033Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E010", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "On macro_log_macro_results: Close", "name": "ConnectionClosed", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.105439Z"}}
{"data": {"command_name": "run-operation", "command_success": true, "command_wall_clock_time": 1.3516634, "process_in_blocks": "0", "process_kernel_time": 0.405345, "process_mem_max_rss": "123682816", "process_out_blocks": "0", "process_user_time": 2.87405}, "info": {"category": "", "code": "Z051", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Resource report: {\"command_name\": \"run-operation\", \"command_success\": true, \"command_wall_clock_time\": 1.3516634, \"process_user_time\": 2.87405, \"process_kernel_time\": 0.405345, \"process_mem_max_rss\": \"123682816\", \"process_in_blocks\": \"0\", \"process_out_blocks\": \"0\"}", "name": "ResourceReport", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.115122Z"}}
{"data": {"command": "dbt run-operation", "completed_at": "2024-08-19T02:25:11.115882Z", "elapsed": 1.3526021, "success": true}, "info": {"category": "", "code": "Q039", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Command `dbt run-operation` succeeded at 10:25:11.115882 after 1.35 seconds", "name": "CommandCompleted", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.116011Z"}}
{"data": {"conn_name": "macro_log_macro_results"}, "info": {"category": "", "code": "E008", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Connection 'macro_log_macro_results' was properly closed.", "name": "ConnectionClosedInCleanup", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.116606Z"}}
{"data": {"kwargs": "{'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10beb2410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115343ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115d057b0>]}"}, "info": {"category": "", "code": "Z040", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Sending event: {'category': 'dbt', 'action': 'invocation', 'label': 'end', 'context': [<snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x10beb2410>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115343ca0>, <snowplow_tracker.self_describing_json.SelfDescribingJson object at 0x115d057b0>]}", "name": "SendingEvent", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.117152Z"}}
{"data": {}, "info": {"category": "", "code": "Z042", "extra": {}, "invocation_id": "3af00862-cfa1-48dc-870e-a5a44ecd54c7", "level": "debug", "msg": "Flushing usage events", "name": "FlushEvents", "pid": 49433, "thread": "MainThread", "ts": "2024-08-19T02:25:11.117714Z"}}
